{
  "agent_code": "# agent.py\n\nimport os\nfrom dotenv import load_dotenv\nfrom any_agent import AgentConfig, AnyAgent\nfrom any_agent.config import MCPStdio\nfrom pydantic import BaseModel, Field\nfrom fire import Fire\n\n# ---- Local tools ------------------------------------------------------------\nfrom tools.extract_text_from_url import extract_text_from_url\nfrom tools.generate_podcast_script_with_llm import generate_podcast_script_with_llm\n\nload_dotenv()\n\n# ================= Structured output =========================================\nclass StructuredOutput(BaseModel):\n    url: str = Field(..., description=\"The original URL that was processed.\")\n    num_hosts: int = Field(..., description=\"Number of hosts/speakers requested for the podcast script.\")\n    podcast_script: str = Field(..., description=\"The generated multi-speaker podcast script.\")\n    audio_file_path: str = Field(..., description=\"Filesystem path (or URL) of the generated final podcast audio file.\")\n\n\n# ================= System (multi-step) instructions ==========================\nINSTRUCTIONS = \"\"\"\nYou are a podcast-production assistant.  Follow this strictly ordered workflow:\n\n1. INPUT  →  Receive a web URL (web_url) and an integer (num_hosts) that tells you how many distinct hosts/speakers the final podcast must feature (minimum 2, default 2).\n\n2. EXTRACT →  Call the extract_text_from_url tool to pull the primary textual content from the provided URL.  If extraction fails, halt and return an error message in podcast_script.\n\n3. SCRIPT  →  Feed the extracted text into generate_podcast_script_with_llm, passing num_hosts so the script contains exactly that many clearly labelled speakers (e.g. \"Host 1:\", \"Host 2:\").  The script must include an intro and an outro.\n\n4. AUDIO   →  Pass the full script to the generate_audio_script tool (from the ElevenLabs MCP server).  Supply the script as a **plain string**; the server will automatically create distinct voices based on the speaker labels.  Capture the returned audio job ID or path, then call get_audio_file to download the final MP3.  Save the file path returned by get_audio_file.\n\n5. OUTPUT  →  Return a JSON object of type StructuredOutput containing:\n     • url\n     • num_hosts\n     • podcast_script\n     • audio_file_path  (absolute or relative path to the MP3)\n\nGeneral rules:\n• Always use the tools exactly as described.\n• Do NOT add extra commentary outside the StructuredOutput schema.\n• If any step fails, populate podcast_script with a clear error description and leave audio_file_path empty.\n\"\"\"\n\n# ================= MCP (ElevenLabs) setup ====================================\nelevenlabs_mcp = MCPStdio(\n    command=\"docker\",\n    args=[\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"ELEVENLABS_API_KEY\",\n        \"mcp/elevenlabs\",\n    ],\n    env={\n        \"ELEVENLABS_API_KEY\": os.getenv(\"ELEVENLABS_API_KEY\"),\n    },\n    tools=[\n        \"generate_audio_script\",  # turn full script with multiple speakers into audio\n        \"get_audio_file\",         # download the final MP3 file\n    ],\n)\n\nTOOLS = [\n    extract_text_from_url,\n    generate_podcast_script_with_llm,\n    elevenlabs_mcp,\n]\n\n# ================= Agent creation ============================================\nagent = AnyAgent.create(\n    \"openai\",\n    AgentConfig(\n        model_id=\"o3\",\n        instructions=INSTRUCTIONS,\n        tools=TOOLS,\n        agent_args={\"output_type\": StructuredOutput},\n        model_args={\"tool_choice\": \"required\"},\n    ),\n)\n\n\n# ================= CLI wrapper ===============================================\n\ndef run_agent(web_url: str, num_hosts: int = 2):\n    \"\"\"Generate a multi-speaker podcast from a web page.\"\"\"\n    input_prompt = (\n        f\"Please create an audio podcast with {num_hosts} hosts based on the contents of: {web_url}\"\n    )\n    agent_trace = agent.run(prompt=input_prompt)\n\n    # Save full trace for evaluation\n    os.makedirs(\"generated_workflows/latest\", exist_ok=True)\n    with open(\"generated_workflows/latest/agent_eval_trace.json\", \"w\", encoding=\"utf-8\") as f:\n        f.write(agent_trace.model_dump_json(indent=2))\n\n    return agent_trace.final_output\n\n\nif __name__ == \"__main__\":\n    Fire(run_agent)\n",
  "run_instructions": "## Setup & Run Instructions\n\n1. Clone or download this repository and `cd` into its root.\n\n2. Create a `.env` file in the project root containing **at least** the following environment variables:\n\n```dotenv\nOPENAI_API_KEY=your_openai_key_here\nELEVENLABS_API_KEY=your_elevenlabs_key_here\n```\n*(Add any additional ElevenLabs variables if you need to override defaults, e.g. `ELEVENLABS_VOICE_ID`, etc.)*\n\n3. Create and activate a Python 3.11 environment with **mamba**:\n\n```bash\nmamba create -n anyagent-podcast python=3.11 -y\nmamba activate anyagent-podcast\n```\n\n4. Install dependencies using `requirements.txt` (will be generated from the list below):\n\n```bash\npip install -r requirements.txt\n```\n\n5. Ensure Docker is installed and running (required for the ElevenLabs MCP container).\n\n6. Run the agent:\n\n```bash\npython agent.py --web_url \"https://example.com/article\" --num_hosts 3\n```\n\nThe script will:\n* extract text from the page,\n* generate a multi-speaker podcast script,\n* synthesize speech via ElevenLabs,\n* save the final MP3 locally,\n* and output a JSON object with details.\n\nA complete execution trace is saved to `generated_workflows/latest/agent_eval_trace.json` for inspection or automated evaluation.",
  "dependencies": "any-agent[all]\npython-dotenv\nfire\nbeautifulsoup4\nrequests"
}
