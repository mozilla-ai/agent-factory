{
  "filesystem": {
    "id": "filesystem",
    "name": "filesystem",
    "description": "Local file system operations and management",
    "license": "",
    "tools": [
      {
        "name": "read_file",
        "description": "Read the complete contents of a file as text. DEPRECATED: Use read_text_file instead.",
        "inputSchema": {
          "type": "object",
          "properties": {
            "path": {
              "type": "string"
            },
            "tail": {
              "type": "number",
              "description": "If provided, returns only the last N lines of the file"
            },
            "head": {
              "type": "number",
              "description": "If provided, returns only the first N lines of the file"
            }
          },
          "required": [
            "path"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "read_text_file",
        "description": "Read the complete contents of a file from the file system as text. Handles various text encodings and provides detailed error messages if the file cannot be read. Use this tool when you need to examine the contents of a single file. Use the 'head' parameter to read only the first N lines of a file, or the 'tail' parameter to read only the last N lines of a file. Operates on the file as text regardless of extension. Only works within allowed directories.",
        "inputSchema": {
          "type": "object",
          "properties": {
            "path": {
              "type": "string"
            },
            "tail": {
              "type": "number",
              "description": "If provided, returns only the last N lines of the file"
            },
            "head": {
              "type": "number",
              "description": "If provided, returns only the first N lines of the file"
            }
          },
          "required": [
            "path"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "read_media_file",
        "description": "Read an image or audio file. Returns the base64 encoded data and MIME type. Only works within allowed directories.",
        "inputSchema": {
          "type": "object",
          "properties": {
            "path": {
              "type": "string"
            }
          },
          "required": [
            "path"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "read_multiple_files",
        "description": "Read the contents of multiple files simultaneously. This is more efficient than reading files one by one when you need to analyze or compare multiple files. Each file's content is returned with its path as a reference. Failed reads for individual files won't stop the entire operation. Only works within allowed directories.",
        "inputSchema": {
          "type": "object",
          "properties": {
            "paths": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": [
            "paths"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "write_file",
        "description": "Create a new file or completely overwrite an existing file with new content. Use with caution as it will overwrite existing files without warning. Handles text content with proper encoding. Only works within allowed directories.",
        "inputSchema": {
          "type": "object",
          "properties": {
            "path": {
              "type": "string"
            },
            "content": {
              "type": "string"
            }
          },
          "required": [
            "path",
            "content"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "edit_file",
        "description": "Make line-based edits to a text file. Each edit replaces exact line sequences with new content. Returns a git-style diff showing the changes made. Only works within allowed directories.",
        "inputSchema": {
          "type": "object",
          "properties": {
            "path": {
              "type": "string"
            },
            "edits": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "oldText": {
                    "type": "string",
                    "description": "Text to search for - must match exactly"
                  },
                  "newText": {
                    "type": "string",
                    "description": "Text to replace with"
                  }
                },
                "required": [
                  "oldText",
                  "newText"
                ],
                "additionalProperties": false
              }
            },
            "dryRun": {
              "type": "boolean",
              "default": false,
              "description": "Preview changes using git-style diff format"
            }
          },
          "required": [
            "path",
            "edits"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "create_directory",
        "description": "Create a new directory or ensure a directory exists. Can create multiple nested directories in one operation. If the directory already exists, this operation will succeed silently. Perfect for setting up directory structures for projects or ensuring required paths exist. Only works within allowed directories.",
        "inputSchema": {
          "type": "object",
          "properties": {
            "path": {
              "type": "string"
            }
          },
          "required": [
            "path"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "list_directory",
        "description": "Get a detailed listing of all files and directories in a specified path. Results clearly distinguish between files and directories with [FILE] and [DIR] prefixes. This tool is essential for understanding directory structure and finding specific files within a directory. Only works within allowed directories.",
        "inputSchema": {
          "type": "object",
          "properties": {
            "path": {
              "type": "string"
            }
          },
          "required": [
            "path"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "list_directory_with_sizes",
        "description": "Get a detailed listing of all files and directories in a specified path, including sizes. Results clearly distinguish between files and directories with [FILE] and [DIR] prefixes. This tool is useful for understanding directory structure and finding specific files within a directory. Only works within allowed directories.",
        "inputSchema": {
          "type": "object",
          "properties": {
            "path": {
              "type": "string"
            },
            "sortBy": {
              "type": "string",
              "enum": [
                "name",
                "size"
              ],
              "default": "name",
              "description": "Sort entries by name or size"
            }
          },
          "required": [
            "path"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "directory_tree",
        "description": "Get a recursive tree view of files and directories as a JSON structure. Each entry includes 'name', 'type' (file/directory), and 'children' for directories. Files have no children array, while directories always have a children array (which may be empty). The output is formatted with 2-space indentation for readability. Only works within allowed directories.",
        "inputSchema": {
          "type": "object",
          "properties": {
            "path": {
              "type": "string"
            }
          },
          "required": [
            "path"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "move_file",
        "description": "Move or rename files and directories. Can move files between directories and rename them in a single operation. If the destination exists, the operation will fail. Works across different directories and can be used for simple renaming within the same directory. Both source and destination must be within allowed directories.",
        "inputSchema": {
          "type": "object",
          "properties": {
            "source": {
              "type": "string"
            },
            "destination": {
              "type": "string"
            }
          },
          "required": [
            "source",
            "destination"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "search_files",
        "description": "Recursively search for files and directories matching a pattern. Searches through all subdirectories from the starting path. The search is case-insensitive and matches partial names. Returns full paths to all matching items. Great for finding files when you don't know their exact location. Only searches within allowed directories.",
        "inputSchema": {
          "type": "object",
          "properties": {
            "path": {
              "type": "string"
            },
            "pattern": {
              "type": "string"
            },
            "excludePatterns": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": []
            }
          },
          "required": [
            "path",
            "pattern"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "get_file_info",
        "description": "Retrieve detailed metadata about a file or directory. Returns comprehensive information including size, creation time, last modified time, permissions, and type. This tool is perfect for understanding file characteristics without reading the actual content. Only works within allowed directories.",
        "inputSchema": {
          "type": "object",
          "properties": {
            "path": {
              "type": "string"
            }
          },
          "required": [
            "path"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "list_allowed_directories",
        "description": "Returns the list of root directories that this server is allowed to access. Use this to understand which directories are available before trying to access files. ",
        "inputSchema": {
          "type": "object",
          "properties": {},
          "required": []
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      }
    ],
    "installations": {
      "default": {
        "type": "npx",
        "command": "npx",
        "version": "",
        "recommended": false,
        "deprecated": false
      }
    },
    "isOfficial": false,
    "deprecated": false
  },
  "duckduckgo-mcp": {
    "id": "duckduckgo-mcp",
    "name": "duckduckgo-mcp",
    "description": "Web search capabilities using DuckDuckGo",
    "license": "",
    "tools": [
      {
        "name": "search",
        "description": "\n    Search DuckDuckGo and return formatted results.\n\n    Args:\n        query: The search query string\n        max_results: Maximum number of results to return (default: 10)\n        ctx: MCP context for logging\n    ",
        "inputSchema": {
          "properties": {
            "query": {
              "title": "Query",
              "type": "string"
            },
            "max_results": {
              "default": 10,
              "title": "Max Results",
              "type": "integer"
            }
          },
          "required": [
            "query"
          ],
          "title": "searchArguments",
          "type": "object"
        },
        "outputSchema": {
          "properties": {
            "result": {
              "title": "Result",
              "type": "string"
            }
          },
          "required": [
            "result"
          ],
          "title": "searchOutput",
          "type": "object"
        },
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "fetch_content",
        "description": "\n    Fetch and parse content from a webpage URL.\n\n    Args:\n        url: The webpage URL to fetch content from\n        ctx: MCP context for logging\n    ",
        "inputSchema": {
          "properties": {
            "url": {
              "title": "Url",
              "type": "string"
            }
          },
          "required": [
            "url"
          ],
          "title": "fetch_contentArguments",
          "type": "object"
        },
        "outputSchema": {
          "properties": {
            "result": {
              "title": "Result",
              "type": "string"
            }
          },
          "required": [
            "result"
          ],
          "title": "fetch_contentOutput",
          "type": "object"
        },
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      }
    ],
    "installations": {
      "default": {
        "type": "uvx",
        "command": "uvx",
        "version": "",
        "recommended": false,
        "deprecated": false
      }
    },
    "isOfficial": false,
    "deprecated": false
  },
  "mcp-obsidian": {
    "id": "mcp-obsidian",
    "name": "mcp-obsidian",
    "description": "Obsidian vault integration for note management",
    "license": "",
    "tools": [
      {
        "name": "read_notes",
        "description": "Read the contents of multiple notes. Each note's content is returned with its path as a reference. Failed reads for individual notes won't stop the entire operation. Reading too many at once may result in an error.",
        "inputSchema": {
          "type": "object",
          "properties": {
            "paths": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": [
            "paths"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "search_notes",
        "description": "Searches for a note by its name. The search is case-insensitive and matches partial names. Queries can also be a valid regex. Returns paths of the notes that match the query.",
        "inputSchema": {
          "type": "object",
          "properties": {
            "query": {
              "type": "string"
            }
          },
          "required": [
            "query"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      }
    ],
    "installations": {
      "default": {
        "type": "npx",
        "command": "npx",
        "version": "",
        "recommended": false,
        "deprecated": false
      }
    },
    "isOfficial": false,
    "deprecated": false
  },
  "mcp-discord": {
    "id": "mcp-discord",
    "name": "mcp-discord",
    "description": "Discord messaging and server management",
    "license": "",
    "tools": [
      {
        "name": "discord_create_category",
        "description": "Creates a new category in a Discord server.",
        "inputSchema": {
          "type": "object",
          "properties": {
            "guildId": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "position": {
              "type": "number"
            },
            "reason": {
              "type": "string"
            }
          },
          "required": [
            "guildId",
            "name"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "discord_edit_category",
        "description": "Edits an existing Discord category (name and position).",
        "inputSchema": {
          "type": "object",
          "properties": {
            "categoryId": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "position": {
              "type": "number"
            },
            "reason": {
              "type": "string"
            }
          },
          "required": [
            "categoryId"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "discord_delete_category",
        "description": "Deletes a Discord category by ID.",
        "inputSchema": {
          "type": "object",
          "properties": {
            "categoryId": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            }
          },
          "required": [
            "categoryId"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "discord_login",
        "description": "Logs in to Discord using the configured token",
        "inputSchema": {
          "type": "object",
          "properties": {
            "token": {
              "type": "string"
            }
          },
          "required": []
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "discord_send",
        "description": "Sends a message to a specified Discord text channel",
        "inputSchema": {
          "type": "object",
          "properties": {
            "channelId": {
              "type": "string"
            },
            "message": {
              "type": "string"
            }
          },
          "required": [
            "channelId",
            "message"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "discord_get_forum_channels",
        "description": "Lists all forum channels in a specified Discord server (guild)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "guildId": {
              "type": "string"
            }
          },
          "required": [
            "guildId"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "discord_create_forum_post",
        "description": "Creates a new post in a Discord forum channel with optional tags",
        "inputSchema": {
          "type": "object",
          "properties": {
            "forumChannelId": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "content": {
              "type": "string"
            },
            "tags": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": [
            "forumChannelId",
            "title",
            "content"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "discord_get_forum_post",
        "description": "Retrieves details about a forum post including its messages",
        "inputSchema": {
          "type": "object",
          "properties": {
            "threadId": {
              "type": "string"
            }
          },
          "required": [
            "threadId"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "discord_reply_to_forum",
        "description": "Adds a reply to an existing forum post or thread",
        "inputSchema": {
          "type": "object",
          "properties": {
            "threadId": {
              "type": "string"
            },
            "message": {
              "type": "string"
            }
          },
          "required": [
            "threadId",
            "message"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "discord_create_text_channel",
        "description": "Creates a new text channel in a Discord server with an optional topic",
        "inputSchema": {
          "type": "object",
          "properties": {
            "guildId": {
              "type": "string"
            },
            "channelName": {
              "type": "string"
            },
            "topic": {
              "type": "string"
            }
          },
          "required": [
            "guildId",
            "channelName"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "discord_delete_channel",
        "description": "Deletes a Discord channel with an optional reason",
        "inputSchema": {
          "type": "object",
          "properties": {
            "channelId": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            }
          },
          "required": [
            "channelId"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "discord_read_messages",
        "description": "Retrieves messages from a Discord text channel with a configurable limit",
        "inputSchema": {
          "type": "object",
          "properties": {
            "channelId": {
              "type": "string"
            },
            "limit": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 50
            }
          },
          "required": [
            "channelId"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "discord_get_server_info",
        "description": "Retrieves detailed information about a Discord server including channels and member count",
        "inputSchema": {
          "type": "object",
          "properties": {
            "guildId": {
              "type": "string"
            }
          },
          "required": [
            "guildId"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "discord_add_reaction",
        "description": "Adds an emoji reaction to a specific Discord message",
        "inputSchema": {
          "type": "object",
          "properties": {
            "channelId": {
              "type": "string"
            },
            "messageId": {
              "type": "string"
            },
            "emoji": {
              "type": "string"
            }
          },
          "required": [
            "channelId",
            "messageId",
            "emoji"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "discord_add_multiple_reactions",
        "description": "Adds multiple emoji reactions to a Discord message at once",
        "inputSchema": {
          "type": "object",
          "properties": {
            "channelId": {
              "type": "string"
            },
            "messageId": {
              "type": "string"
            },
            "emojis": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "required": [
            "channelId",
            "messageId",
            "emojis"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "discord_remove_reaction",
        "description": "Removes a specific emoji reaction from a Discord message",
        "inputSchema": {
          "type": "object",
          "properties": {
            "channelId": {
              "type": "string"
            },
            "messageId": {
              "type": "string"
            },
            "emoji": {
              "type": "string"
            },
            "userId": {
              "type": "string"
            }
          },
          "required": [
            "channelId",
            "messageId",
            "emoji"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "discord_delete_forum_post",
        "description": "Deletes a forum post or thread with an optional reason",
        "inputSchema": {
          "type": "object",
          "properties": {
            "threadId": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            }
          },
          "required": [
            "threadId"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "discord_delete_message",
        "description": "Deletes a specific message from a Discord text channel",
        "inputSchema": {
          "type": "object",
          "properties": {
            "channelId": {
              "type": "string"
            },
            "messageId": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            }
          },
          "required": [
            "channelId",
            "messageId"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "discord_create_webhook",
        "description": "Creates a new webhook for a Discord channel",
        "inputSchema": {
          "type": "object",
          "properties": {
            "channelId": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "avatar": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            }
          },
          "required": [
            "channelId",
            "name"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "discord_send_webhook_message",
        "description": "Sends a message to a Discord channel using a webhook",
        "inputSchema": {
          "type": "object",
          "properties": {
            "webhookId": {
              "type": "string"
            },
            "webhookToken": {
              "type": "string"
            },
            "content": {
              "type": "string"
            },
            "username": {
              "type": "string"
            },
            "avatarURL": {
              "type": "string"
            },
            "threadId": {
              "type": "string"
            }
          },
          "required": [
            "webhookId",
            "webhookToken",
            "content"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "discord_edit_webhook",
        "description": "Edits an existing webhook for a Discord channel",
        "inputSchema": {
          "type": "object",
          "properties": {
            "webhookId": {
              "type": "string"
            },
            "webhookToken": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "avatar": {
              "type": "string"
            },
            "channelId": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            }
          },
          "required": [
            "webhookId"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "discord_delete_webhook",
        "description": "Deletes an existing webhook for a Discord channel",
        "inputSchema": {
          "type": "object",
          "properties": {
            "webhookId": {
              "type": "string"
            },
            "webhookToken": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            }
          },
          "required": [
            "webhookId"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      }
    ],
    "installations": {
      "default": {
        "type": "npx",
        "command": "npx",
        "version": "",
        "recommended": false,
        "deprecated": false
      }
    },
    "isOfficial": false,
    "deprecated": false
  },
  "memory": {
    "id": "memory",
    "name": "memory",
    "description": "Memory management and persistence for MCP servers",
    "license": "",
    "tools": [
      {
        "name": "create_entities",
        "description": "Create multiple new entities in the knowledge graph",
        "inputSchema": {
          "type": "object",
          "properties": {
            "entities": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the entity"
                  },
                  "entityType": {
                    "type": "string",
                    "description": "The type of the entity"
                  },
                  "observations": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "An array of observation contents associated with the entity"
                  }
                },
                "required": [
                  "name",
                  "entityType",
                  "observations"
                ]
              }
            }
          },
          "required": [
            "entities"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "create_relations",
        "description": "Create multiple new relations between entities in the knowledge graph. Relations should be in active voice",
        "inputSchema": {
          "type": "object",
          "properties": {
            "relations": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "from": {
                    "type": "string",
                    "description": "The name of the entity where the relation starts"
                  },
                  "to": {
                    "type": "string",
                    "description": "The name of the entity where the relation ends"
                  },
                  "relationType": {
                    "type": "string",
                    "description": "The type of the relation"
                  }
                },
                "required": [
                  "from",
                  "to",
                  "relationType"
                ]
              }
            }
          },
          "required": [
            "relations"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "add_observations",
        "description": "Add new observations to existing entities in the knowledge graph",
        "inputSchema": {
          "type": "object",
          "properties": {
            "observations": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "entityName": {
                    "type": "string",
                    "description": "The name of the entity to add the observations to"
                  },
                  "contents": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "An array of observation contents to add"
                  }
                },
                "required": [
                  "entityName",
                  "contents"
                ]
              }
            }
          },
          "required": [
            "observations"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "delete_entities",
        "description": "Delete multiple entities and their associated relations from the knowledge graph",
        "inputSchema": {
          "type": "object",
          "properties": {
            "entityNames": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "An array of entity names to delete"
            }
          },
          "required": [
            "entityNames"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "delete_observations",
        "description": "Delete specific observations from entities in the knowledge graph",
        "inputSchema": {
          "type": "object",
          "properties": {
            "deletions": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "entityName": {
                    "type": "string",
                    "description": "The name of the entity containing the observations"
                  },
                  "observations": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "An array of observations to delete"
                  }
                },
                "required": [
                  "entityName",
                  "observations"
                ]
              }
            }
          },
          "required": [
            "deletions"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "delete_relations",
        "description": "Delete multiple relations from the knowledge graph",
        "inputSchema": {
          "type": "object",
          "properties": {
            "relations": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "from": {
                    "type": "string",
                    "description": "The name of the entity where the relation starts"
                  },
                  "to": {
                    "type": "string",
                    "description": "The name of the entity where the relation ends"
                  },
                  "relationType": {
                    "type": "string",
                    "description": "The type of the relation"
                  }
                },
                "required": [
                  "from",
                  "to",
                  "relationType"
                ]
              },
              "description": "An array of relations to delete"
            }
          },
          "required": [
            "relations"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "read_graph",
        "description": "Read the entire knowledge graph",
        "inputSchema": {
          "type": "object",
          "properties": {}
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "search_nodes",
        "description": "Search for nodes in the knowledge graph based on a query",
        "inputSchema": {
          "type": "object",
          "properties": {
            "query": {
              "type": "string",
              "description": "The search query to match against entity names, types, and observation content"
            }
          },
          "required": [
            "query"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "open_nodes",
        "description": "Open specific nodes in the knowledge graph by their names",
        "inputSchema": {
          "type": "object",
          "properties": {
            "names": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "An array of entity names to retrieve"
            }
          },
          "required": [
            "names"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      }
    ],
    "installations": {
      "default": {
        "type": "npx",
        "command": "npx",
        "version": "",
        "recommended": false,
        "deprecated": false
      }
    },
    "isOfficial": false,
    "deprecated": false
  },
  "notion": {
    "id": "notion",
    "name": "notion",
    "description": "Notion workspace integration for page management",
    "license": "",
    "tools": [
      {
        "name": "API-get-user",
        "description": "Retrieve a user\nError Responses:\n400: 400",
        "inputSchema": {
          "$defs": {},
          "type": "object",
          "properties": {
            "user_id": {
              "type": "string",
              "format": "uuid"
            }
          },
          "required": [
            "user_id"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "API-get-users",
        "description": "List all users\nError Responses:\n400: 400",
        "inputSchema": {
          "$defs": {},
          "type": "object",
          "properties": {
            "start_cursor": {
              "type": "string",
              "description": "If supplied, this endpoint will return a page of results starting after the cursor provided. If not supplied, this endpoint will return the first page of results."
            },
            "page_size": {
              "type": "integer",
              "default": 100,
              "description": "The number of items from the full list desired in the response. Maximum: 100"
            }
          },
          "required": []
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "API-get-self",
        "description": "Retrieve your token's bot user",
        "inputSchema": {
          "$defs": {},
          "type": "object",
          "properties": {},
          "required": []
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "API-post-database-query",
        "description": "Query a database",
        "inputSchema": {
          "$defs": {},
          "type": "object",
          "properties": {
            "database_id": {
              "type": "string",
              "description": "Identifier for a Notion database."
            },
            "filter_properties": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A list of page property value IDs associated with the database. Use this param to limit the response to a specific page property value or values for pages that meet the `filter` criteria."
            },
            "filter": {
              "type": "object",
              "description": "When supplied, limits which pages are returned based on the [filter conditions](ref:post-database-query-filter).",
              "additionalProperties": true
            },
            "sorts": {
              "type": "array",
              "description": "When supplied, orders the results based on the provided [sort criteria](ref:post-database-query-sort).",
              "items": {
                "type": "object",
                "properties": {
                  "property": {
                    "type": "string"
                  },
                  "direction": {
                    "type": "string",
                    "enum": [
                      "ascending",
                      "descending"
                    ]
                  }
                },
                "required": [
                  "property",
                  "direction"
                ],
                "additionalProperties": true
              }
            },
            "start_cursor": {
              "type": "string",
              "description": "When supplied, returns a page of results starting after the cursor provided. If not supplied, this endpoint will return the first page of results."
            },
            "page_size": {
              "type": "integer",
              "description": "The number of items from the full list desired in the response. Maximum: 100",
              "default": 100
            },
            "archived": {
              "type": "boolean"
            },
            "in_trash": {
              "type": "boolean"
            }
          },
          "required": [
            "database_id"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "API-post-search",
        "description": "Search by title",
        "inputSchema": {
          "$defs": {},
          "type": "object",
          "properties": {
            "query": {
              "type": "string",
              "description": "The text that the API compares page and database titles against."
            },
            "sort": {
              "type": "object",
              "description": "A set of criteria, `direction` and `timestamp` keys, that orders the results. The **only** supported timestamp value is `\"last_edited_time\"`. Supported `direction` values are `\"ascending\"` and `\"descending\"`. If `sort` is not provided, then the most recently edited results are returned first.",
              "properties": {
                "direction": {
                  "type": "string",
                  "description": "The direction to sort. Possible values include `ascending` and `descending`."
                },
                "timestamp": {
                  "type": "string",
                  "description": "The name of the timestamp to sort against. Possible values include `last_edited_time`."
                }
              },
              "additionalProperties": true
            },
            "filter": {
              "type": "object",
              "description": "A set of criteria, `value` and `property` keys, that limits the results to either only pages or only databases. Possible `value` values are `\"page\"` or `\"database\"`. The only supported `property` value is `\"object\"`.",
              "properties": {
                "value": {
                  "type": "string",
                  "description": "The value of the property to filter the results by.  Possible values for object type include `page` or `database`.  **Limitation**: Currently the only filter allowed is `object` which will filter by type of object (either `page` or `database`)"
                },
                "property": {
                  "type": "string",
                  "description": "The name of the property to filter by. Currently the only property you can filter by is the object type.  Possible values include `object`.   Limitation: Currently the only filter allowed is `object` which will filter by type of object (either `page` or `database`)"
                }
              },
              "additionalProperties": true
            },
            "start_cursor": {
              "type": "string",
              "description": "A `cursor` value returned in a previous response that If supplied, limits the response to results starting after the `cursor`. If not supplied, then the first page of results is returned. Refer to [pagination](https://developers.notion.com/reference/intro#pagination) for more details."
            },
            "page_size": {
              "type": "integer",
              "format": "int32",
              "description": "The number of items from the full list to include in the response. Maximum: `100`.",
              "default": 100
            }
          },
          "required": []
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "API-get-block-children",
        "description": "Retrieve block children",
        "inputSchema": {
          "$defs": {},
          "type": "object",
          "properties": {
            "block_id": {
              "type": "string",
              "description": "Identifier for a [block](ref:block)"
            },
            "start_cursor": {
              "type": "string",
              "description": "If supplied, this endpoint will return a page of results starting after the cursor provided. If not supplied, this endpoint will return the first page of results."
            },
            "page_size": {
              "type": "integer",
              "format": "int32",
              "default": 100,
              "description": "The number of items from the full list desired in the response. Maximum: 100"
            }
          },
          "required": [
            "block_id"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "API-patch-block-children",
        "description": "Append block children",
        "inputSchema": {
          "$defs": {},
          "type": "object",
          "properties": {
            "block_id": {
              "type": "string",
              "description": "Identifier for a [block](ref:block). Also accepts a [page](ref:page) ID."
            },
            "children": {
              "type": "array",
              "description": "Child content to append to a container block as an array of [block objects](ref:block)",
              "items": {
                "type": "object",
                "properties": {
                  "paragraph": {
                    "type": "object",
                    "properties": {
                      "rich_text": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "text": {
                              "type": "object",
                              "properties": {
                                "content": {
                                  "type": "string"
                                },
                                "link": {
                                  "type": [
                                    "object",
                                    "null"
                                  ]
                                }
                              },
                              "required": [
                                "content"
                              ],
                              "additionalProperties": false
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "text"
                              ]
                            }
                          },
                          "required": [
                            "text"
                          ],
                          "additionalProperties": false
                        }
                      }
                    },
                    "required": [
                      "rich_text"
                    ],
                    "additionalProperties": false
                  },
                  "bulleted_list_item": {
                    "type": "object",
                    "properties": {
                      "rich_text": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "text": {
                              "type": "object",
                              "properties": {
                                "content": {
                                  "type": "string"
                                },
                                "link": {
                                  "type": [
                                    "object",
                                    "null"
                                  ]
                                }
                              },
                              "required": [
                                "content"
                              ],
                              "additionalProperties": false
                            },
                            "type": {
                              "type": "string",
                              "enum": [
                                "text"
                              ]
                            }
                          },
                          "required": [
                            "text"
                          ],
                          "additionalProperties": false
                        }
                      }
                    },
                    "required": [
                      "rich_text"
                    ],
                    "additionalProperties": false
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "paragraph",
                      "bulleted_list_item"
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "after": {
              "type": "string",
              "description": "The ID of the existing block that the new block should be appended after."
            }
          },
          "required": [
            "block_id",
            "children"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "API-retrieve-a-block",
        "description": "Retrieve a block",
        "inputSchema": {
          "$defs": {},
          "type": "object",
          "properties": {
            "block_id": {
              "type": "string",
              "description": "Identifier for a Notion block"
            }
          },
          "required": [
            "block_id"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "API-update-a-block",
        "description": "Update a block",
        "inputSchema": {
          "$defs": {},
          "type": "object",
          "properties": {
            "block_id": {
              "type": "string",
              "description": "Identifier for a Notion block"
            },
            "type": {
              "type": "object",
              "description": "The [block object `type`](ref:block#block-object-keys) value with the properties to be updated. Currently only `text` (for supported block types) and `checked` (for `to_do` blocks) fields can be updated.",
              "properties": {},
              "additionalProperties": true
            },
            "archived": {
              "type": "boolean",
              "description": "Set to true to archive (delete) a block. Set to false to un-archive (restore) a block.",
              "default": true
            }
          },
          "required": [
            "block_id"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "API-delete-a-block",
        "description": "Delete a block",
        "inputSchema": {
          "$defs": {},
          "type": "object",
          "properties": {
            "block_id": {
              "type": "string",
              "description": "Identifier for a Notion block"
            }
          },
          "required": [
            "block_id"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "API-retrieve-a-page",
        "description": "Retrieve a page",
        "inputSchema": {
          "$defs": {},
          "type": "object",
          "properties": {
            "page_id": {
              "type": "string",
              "description": "Identifier for a Notion page"
            },
            "filter_properties": {
              "type": "string",
              "description": "A list of page property value IDs associated with the page. Use this param to limit the response to a specific page property value or values. To retrieve multiple properties, specify each page property ID. For example: `?filter_properties=iAk8&filter_properties=b7dh`."
            }
          },
          "required": [
            "page_id"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "API-patch-page",
        "description": "Update page properties",
        "inputSchema": {
          "$defs": {},
          "type": "object",
          "properties": {
            "page_id": {
              "type": "string",
              "description": "The identifier for the Notion page to be updated."
            },
            "properties": {
              "type": "object",
              "description": "The property values to update for the page. The keys are the names or IDs of the property and the values are property values. If a page property ID is not included, then it is not changed.",
              "properties": {
                "title": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "text": {
                        "type": "object",
                        "properties": {
                          "content": {
                            "type": "string"
                          },
                          "link": {
                            "type": [
                              "object",
                              "null"
                            ]
                          }
                        },
                        "required": [
                          "content"
                        ],
                        "additionalProperties": false
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "text"
                        ]
                      }
                    },
                    "required": [
                      "text"
                    ],
                    "additionalProperties": false
                  }
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "title"
                  ]
                }
              },
              "required": [
                "title"
              ],
              "additionalProperties": false
            },
            "in_trash": {
              "type": "boolean",
              "description": "Set to true to delete a block. Set to false to restore a block.",
              "default": false
            },
            "archived": {
              "type": "boolean"
            },
            "icon": {
              "type": "object",
              "description": "A page icon for the page. Supported types are [external file object](https://developers.notion.com/reference/file-object) or [emoji object](https://developers.notion.com/reference/emoji-object).",
              "properties": {
                "emoji": {
                  "type": "string"
                }
              },
              "required": [
                "emoji"
              ],
              "additionalProperties": false
            },
            "cover": {
              "type": "object",
              "description": "A cover image for the page. Only [external file objects](https://developers.notion.com/reference/file-object) are supported.",
              "properties": {
                "external": {
                  "type": "object",
                  "properties": {
                    "url": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "url"
                  ],
                  "additionalProperties": false
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "external"
                  ]
                }
              },
              "required": [
                "external"
              ],
              "additionalProperties": false
            }
          },
          "required": [
            "page_id"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "API-post-page",
        "description": "Create a page",
        "inputSchema": {
          "$defs": {},
          "type": "object",
          "properties": {
            "parent": {
              "type": "object",
              "properties": {
                "page_id": {
                  "type": "string",
                  "format": "uuid"
                }
              },
              "required": [
                "page_id"
              ],
              "additionalProperties": true
            },
            "properties": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "text": {
                        "type": "object",
                        "properties": {
                          "content": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "content"
                        ],
                        "additionalProperties": true
                      }
                    },
                    "required": [
                      "text"
                    ],
                    "additionalProperties": true
                  }
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "title"
                  ]
                }
              },
              "required": [
                "title"
              ],
              "additionalProperties": false
            },
            "children": {
              "type": "array",
              "description": "The content to be rendered on the new page, represented as an array of [block objects](https://developers.notion.com/reference/block).",
              "items": {
                "type": "string"
              }
            },
            "icon": {
              "type": "string",
              "format": "json",
              "description": "The icon of the new page. Either an [emoji object](https://developers.notion.com/reference/emoji-object) or an [external file object](https://developers.notion.com/reference/file-object).."
            },
            "cover": {
              "type": "string",
              "format": "json",
              "description": "The cover image of the new page, represented as a [file object](https://developers.notion.com/reference/file-object)."
            }
          },
          "required": [
            "parent",
            "properties"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "API-create-a-database",
        "description": "Create a database",
        "inputSchema": {
          "$defs": {},
          "type": "object",
          "properties": {
            "parent": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "page_id"
                  ]
                },
                "page_id": {
                  "type": "string",
                  "format": "uuid"
                }
              },
              "required": [
                "type",
                "page_id"
              ],
              "additionalProperties": true
            },
            "properties": {
              "type": "object",
              "description": "Property schema of database. The keys are the names of properties as they appear in Notion and the values are [property schema objects](https://developers.notion.com/reference/property-schema-object).",
              "additionalProperties": {
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "title": {
                        "type": "object",
                        "properties": {},
                        "additionalProperties": false
                      },
                      "description": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "title"
                    ],
                    "additionalProperties": false
                  }
                ]
              }
            },
            "title": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "text": {
                    "type": "object",
                    "properties": {
                      "content": {
                        "type": "string"
                      },
                      "link": {
                        "type": [
                          "object",
                          "null"
                        ]
                      }
                    },
                    "required": [
                      "content"
                    ],
                    "additionalProperties": false
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "text"
                    ]
                  }
                },
                "required": [
                  "text"
                ],
                "additionalProperties": false
              }
            }
          },
          "required": [
            "parent",
            "properties"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "API-update-a-database",
        "description": "Update a database",
        "inputSchema": {
          "$defs": {},
          "type": "object",
          "properties": {
            "database_id": {
              "type": "string",
              "description": "identifier for a Notion database"
            },
            "title": {
              "type": "array",
              "description": "An array of [rich text objects](https://developers.notion.com/reference/rich-text) that represents the title of the database that is displayed in the Notion UI. If omitted, then the database title remains unchanged.",
              "items": {
                "type": "object",
                "properties": {
                  "text": {
                    "type": "object",
                    "properties": {
                      "content": {
                        "type": "string"
                      },
                      "link": {
                        "type": [
                          "object",
                          "null"
                        ]
                      }
                    },
                    "required": [
                      "content"
                    ],
                    "additionalProperties": false
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "text"
                    ]
                  }
                },
                "required": [
                  "text"
                ],
                "additionalProperties": false
              }
            },
            "description": {
              "type": "array",
              "description": "An array of [rich text objects](https://developers.notion.com/reference/rich-text) that represents the description of the database that is displayed in the Notion UI. If omitted, then the database description remains unchanged.",
              "items": {
                "type": "object",
                "properties": {
                  "text": {
                    "type": "object",
                    "properties": {
                      "content": {
                        "type": "string"
                      },
                      "link": {
                        "type": [
                          "object",
                          "null"
                        ]
                      }
                    },
                    "required": [
                      "content"
                    ],
                    "additionalProperties": false
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "text"
                    ]
                  }
                },
                "required": [
                  "text"
                ],
                "additionalProperties": false
              }
            },
            "properties": {
              "type": "object",
              "description": "Property schema of database. The keys are the names of properties as they appear in Notion and the values are [property schema objects](https://developers.notion.com/reference/property-schema-object).",
              "properties": {
                "name": {
                  "type": "string"
                }
              },
              "additionalProperties": true
            }
          },
          "required": [
            "database_id"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "API-retrieve-a-database",
        "description": "Retrieve a database",
        "inputSchema": {
          "$defs": {},
          "type": "object",
          "properties": {
            "database_id": {
              "type": "string",
              "description": "An identifier for the Notion database."
            }
          },
          "required": [
            "database_id"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "API-retrieve-a-page-property",
        "description": "Retrieve a page property item",
        "inputSchema": {
          "$defs": {},
          "type": "object",
          "properties": {
            "page_id": {
              "type": "string",
              "description": "Identifier for a Notion page"
            },
            "property_id": {
              "type": "string",
              "description": "Identifier for a page [property](https://developers.notion.com/reference/page#all-property-values)"
            },
            "page_size": {
              "type": "integer",
              "format": "int32",
              "description": "For paginated properties. The max number of property item objects on a page. The default size is 100"
            },
            "start_cursor": {
              "type": "string",
              "description": "For paginated properties."
            }
          },
          "required": [
            "page_id",
            "property_id"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "API-retrieve-a-comment",
        "description": "Retrieve comments",
        "inputSchema": {
          "$defs": {},
          "type": "object",
          "properties": {
            "block_id": {
              "type": "string",
              "description": "Identifier for a Notion block or page"
            },
            "start_cursor": {
              "type": "string",
              "description": "If supplied, this endpoint will return a page of results starting after the cursor provided. If not supplied, this endpoint will return the first page of results."
            },
            "page_size": {
              "type": "integer",
              "format": "int32",
              "description": "The number of items from the full list desired in the response. Maximum: 100"
            }
          },
          "required": [
            "block_id"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "API-create-a-comment",
        "description": "Create comment",
        "inputSchema": {
          "$defs": {},
          "type": "object",
          "properties": {
            "parent": {
              "type": "object",
              "description": "The page that contains the comment",
              "properties": {
                "page_id": {
                  "type": "string",
                  "description": "the page ID"
                }
              },
              "required": [
                "page_id"
              ],
              "additionalProperties": true
            },
            "rich_text": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "text": {
                    "type": "object",
                    "properties": {
                      "content": {
                        "type": "string",
                        "description": "The content of the comment"
                      }
                    },
                    "required": [
                      "content"
                    ],
                    "additionalProperties": true
                  }
                },
                "required": [
                  "text"
                ],
                "additionalProperties": true
              }
            }
          },
          "required": [
            "parent",
            "rich_text"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      }
    ],
    "installations": {
      "default": {
        "type": "npx",
        "command": "npx",
        "version": "",
        "recommended": false,
        "deprecated": false
      }
    },
    "isOfficial": false,
    "deprecated": false
  },
  "google-maps": {
    "id": "google-maps",
    "name": "google-maps",
    "description": "Google Maps integration for location services",
    "license": "",
    "tools": [
      {
        "name": "maps_geocode",
        "description": "Convert an address into geographic coordinates",
        "inputSchema": {
          "type": "object",
          "properties": {
            "address": {
              "type": "string",
              "description": "The address to geocode"
            }
          },
          "required": [
            "address"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "maps_reverse_geocode",
        "description": "Convert coordinates into an address",
        "inputSchema": {
          "type": "object",
          "properties": {
            "latitude": {
              "type": "number",
              "description": "Latitude coordinate"
            },
            "longitude": {
              "type": "number",
              "description": "Longitude coordinate"
            }
          },
          "required": [
            "latitude",
            "longitude"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "maps_search_places",
        "description": "Search for places using Google Places API",
        "inputSchema": {
          "type": "object",
          "properties": {
            "query": {
              "type": "string",
              "description": "Search query"
            },
            "location": {
              "type": "object",
              "properties": {
                "latitude": {
                  "type": "number"
                },
                "longitude": {
                  "type": "number"
                }
              },
              "description": "Optional center point for the search"
            },
            "radius": {
              "type": "number",
              "description": "Search radius in meters (max 50000)"
            }
          },
          "required": [
            "query"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "maps_place_details",
        "description": "Get detailed information about a specific place",
        "inputSchema": {
          "type": "object",
          "properties": {
            "place_id": {
              "type": "string",
              "description": "The place ID to get details for"
            }
          },
          "required": [
            "place_id"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "maps_distance_matrix",
        "description": "Calculate travel distance and time for multiple origins and destinations",
        "inputSchema": {
          "type": "object",
          "properties": {
            "origins": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Array of origin addresses or coordinates"
            },
            "destinations": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Array of destination addresses or coordinates"
            },
            "mode": {
              "type": "string",
              "description": "Travel mode (driving, walking, bicycling, transit)",
              "enum": [
                "driving",
                "walking",
                "bicycling",
                "transit"
              ]
            }
          },
          "required": [
            "origins",
            "destinations"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "maps_elevation",
        "description": "Get elevation data for locations on the earth",
        "inputSchema": {
          "type": "object",
          "properties": {
            "locations": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "latitude": {
                    "type": "number"
                  },
                  "longitude": {
                    "type": "number"
                  }
                },
                "required": [
                  "latitude",
                  "longitude"
                ]
              },
              "description": "Array of locations to get elevation for"
            }
          },
          "required": [
            "locations"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "maps_directions",
        "description": "Get directions between two points",
        "inputSchema": {
          "type": "object",
          "properties": {
            "origin": {
              "type": "string",
              "description": "Starting point address or coordinates"
            },
            "destination": {
              "type": "string",
              "description": "Ending point address or coordinates"
            },
            "mode": {
              "type": "string",
              "description": "Travel mode (driving, walking, bicycling, transit)",
              "enum": [
                "driving",
                "walking",
                "bicycling",
                "transit"
              ]
            }
          },
          "required": [
            "origin",
            "destination"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      }
    ],
    "installations": {
      "default": {
        "type": "npx",
        "command": "npx",
        "version": "",
        "recommended": false,
        "deprecated": false
      }
    },
    "isOfficial": false,
    "deprecated": false
  },
  "perplexity": {
    "id": "perplexity",
    "name": "perplexity",
    "description": "AI-powered search and information retrieval using Perplexity",
    "license": "",
    "tools": [
      {
        "name": "perplexity_ask",
        "description": "Engages in a conversation using the Sonar API. Accepts an array of messages (each with a role and content) and returns a ask completion response from the Perplexity model.",
        "inputSchema": {
          "type": "object",
          "properties": {
            "messages": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "role": {
                    "type": "string",
                    "description": "Role of the message (e.g., system, user, assistant)"
                  },
                  "content": {
                    "type": "string",
                    "description": "The content of the message"
                  }
                },
                "required": [
                  "role",
                  "content"
                ]
              },
              "description": "Array of conversation messages"
            }
          },
          "required": [
            "messages"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      }
    ],
    "installations": {
      "default": {
        "type": "npx",
        "command": "npx",
        "version": "",
        "recommended": false,
        "deprecated": false
      }
    },
    "isOfficial": false,
    "deprecated": false
  },
  "salesforce": {
    "id": "salesforce",
    "name": "salesforce",
    "description": "Salesforce CRM integration",
    "license": "",
    "tools": [
      {
        "name": "run_soql_query",
        "description": "Executes a SOQL query against Salesforce",
        "inputSchema": {
          "type": "object",
          "properties": {
            "query": {
              "type": "string",
              "description": "The SOQL query to execute"
            }
          },
          "required": [
            "query"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "run_sosl_search",
        "description": "Executes a SOSL search against Salesforce",
        "inputSchema": {
          "type": "object",
          "properties": {
            "search": {
              "type": "string",
              "description": "The SOSL search to execute (e.g., 'FIND {John Smith} IN ALL FIELDS')"
            }
          },
          "required": [
            "search"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "get_object_fields",
        "description": "Retrieves field Names, labels and types for a specific Salesforce object",
        "inputSchema": {
          "type": "object",
          "properties": {
            "object_name": {
              "type": "string",
              "description": "The name of the Salesforce object (e.g., 'Account', 'Contact')"
            }
          },
          "required": [
            "object_name"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "get_record",
        "description": "Retrieves a specific record by ID",
        "inputSchema": {
          "type": "object",
          "properties": {
            "object_name": {
              "type": "string",
              "description": "The name of the Salesforce object (e.g., 'Account', 'Contact')"
            },
            "record_id": {
              "type": "string",
              "description": "The ID of the record to retrieve"
            }
          },
          "required": [
            "object_name",
            "record_id"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "create_record",
        "description": "Creates a new record",
        "inputSchema": {
          "type": "object",
          "properties": {
            "object_name": {
              "type": "string",
              "description": "The name of the Salesforce object (e.g., 'Account', 'Contact')"
            },
            "data": {
              "type": "object",
              "description": "The data for the new record",
              "properties": {},
              "additionalProperties": true
            }
          },
          "required": [
            "object_name",
            "data"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "update_record",
        "description": "Updates an existing record",
        "inputSchema": {
          "type": "object",
          "properties": {
            "object_name": {
              "type": "string",
              "description": "The name of the Salesforce object (e.g., 'Account', 'Contact')"
            },
            "record_id": {
              "type": "string",
              "description": "The ID of the record to update"
            },
            "data": {
              "type": "object",
              "description": "The updated data for the record",
              "properties": {},
              "additionalProperties": true
            }
          },
          "required": [
            "object_name",
            "record_id",
            "data"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "delete_record",
        "description": "Deletes a record",
        "inputSchema": {
          "type": "object",
          "properties": {
            "object_name": {
              "type": "string",
              "description": "The name of the Salesforce object (e.g., 'Account', 'Contact')"
            },
            "record_id": {
              "type": "string",
              "description": "The ID of the record to delete"
            }
          },
          "required": [
            "object_name",
            "record_id"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "tooling_execute",
        "description": "Executes a Tooling API request",
        "inputSchema": {
          "type": "object",
          "properties": {
            "action": {
              "type": "string",
              "description": "The Tooling API endpoint to call (e.g., 'sobjects/ApexClass')"
            },
            "method": {
              "type": "string",
              "description": "The HTTP method (default: 'GET')",
              "enum": [
                "GET",
                "POST",
                "PATCH",
                "DELETE"
              ],
              "default": "GET"
            },
            "data": {
              "type": "object",
              "description": "Data for POST/PATCH requests",
              "properties": {},
              "additionalProperties": true
            }
          },
          "required": [
            "action"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "apex_execute",
        "description": "Executes an Apex REST request",
        "inputSchema": {
          "type": "object",
          "properties": {
            "action": {
              "type": "string",
              "description": "The Apex REST endpoint to call (e.g., '/MyApexClass')"
            },
            "method": {
              "type": "string",
              "description": "The HTTP method (default: 'GET')",
              "enum": [
                "GET",
                "POST",
                "PATCH",
                "DELETE"
              ],
              "default": "GET"
            },
            "data": {
              "type": "object",
              "description": "Data for POST/PATCH requests",
              "properties": {},
              "additionalProperties": true
            }
          },
          "required": [
            "action"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "restful",
        "description": "Makes a direct REST API call to Salesforce",
        "inputSchema": {
          "type": "object",
          "properties": {
            "path": {
              "type": "string",
              "description": "The path of the REST API endpoint (e.g., 'sobjects/Account/describe')"
            },
            "method": {
              "type": "string",
              "description": "The HTTP method (default: 'GET')",
              "enum": [
                "GET",
                "POST",
                "PATCH",
                "DELETE"
              ],
              "default": "GET"
            },
            "params": {
              "type": "object",
              "description": "Query parameters for the request",
              "properties": {},
              "additionalProperties": true
            },
            "data": {
              "type": "object",
              "description": "Data for POST/PATCH requests",
              "properties": {},
              "additionalProperties": true
            }
          },
          "required": [
            "path"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      }
    ],
    "installations": {
      "default": {
        "type": "uvx",
        "command": "uvx",
        "version": "",
        "recommended": false,
        "deprecated": false
      }
    },
    "isOfficial": false,
    "deprecated": false
  },
  "elasticsearch": {
    "id": "elasticsearch",
    "name": "elasticsearch",
    "description": "Elasticsearch search and analytics",
    "license": "",
    "tools": [
      {
        "name": "list_indices",
        "description": "List all indices.",
        "inputSchema": {
          "properties": {},
          "type": "object"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "get_index",
        "description": "\n            Returns information (mappings, settings, aliases) about one or more indices.\n            \n            Args:\n                index: Name of the index\n            ",
        "inputSchema": {
          "properties": {
            "index": {
              "title": "Index",
              "type": "string"
            }
          },
          "required": [
            "index"
          ],
          "type": "object"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "create_index",
        "description": "\n            Create a new index.\n            \n            Args:\n                index: Name of the index\n                body: Optional index configuration including mappings and settings\n            ",
        "inputSchema": {
          "properties": {
            "index": {
              "title": "Index",
              "type": "string"
            },
            "body": {
              "anyOf": [
                {
                  "additionalProperties": true,
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "title": "Body"
            }
          },
          "required": [
            "index"
          ],
          "type": "object"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "delete_index",
        "description": "\n            Delete an index.\n            \n            Args:\n                index: Name of the index\n            ",
        "inputSchema": {
          "properties": {
            "index": {
              "title": "Index",
              "type": "string"
            }
          },
          "required": [
            "index"
          ],
          "type": "object"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "search_documents",
        "description": "\n            Search for documents.\n            \n            Args:\n                index: Name of the index\n                body: Search query\n            ",
        "inputSchema": {
          "properties": {
            "index": {
              "title": "Index",
              "type": "string"
            },
            "body": {
              "additionalProperties": true,
              "title": "Body",
              "type": "object"
            }
          },
          "required": [
            "index",
            "body"
          ],
          "type": "object"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "index_document",
        "description": "\n            Creates or updates a document in the index.\n            \n            Args:\n                index: Name of the index\n                document: Document data\n                id: Optional document ID\n            ",
        "inputSchema": {
          "properties": {
            "index": {
              "title": "Index",
              "type": "string"
            },
            "document": {
              "additionalProperties": true,
              "title": "Document",
              "type": "object"
            },
            "id": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "title": "Id"
            }
          },
          "required": [
            "index",
            "document"
          ],
          "type": "object"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "get_document",
        "description": "\n            Get a document by ID.\n            \n            Args:\n                index: Name of the index\n                id: Document ID\n            ",
        "inputSchema": {
          "properties": {
            "index": {
              "title": "Index",
              "type": "string"
            },
            "id": {
              "title": "Id",
              "type": "string"
            }
          },
          "required": [
            "index",
            "id"
          ],
          "type": "object"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "delete_document",
        "description": "\n            Delete a document by ID.\n            \n            Args:\n                index: Name of the index\n                id: Document ID\n            ",
        "inputSchema": {
          "properties": {
            "index": {
              "title": "Index",
              "type": "string"
            },
            "id": {
              "title": "Id",
              "type": "string"
            }
          },
          "required": [
            "index",
            "id"
          ],
          "type": "object"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "delete_by_query",
        "description": "\n            Deletes documents matching the provided query.\n            \n            Args:\n                index: Name of the index\n                body: Query to match documents for deletion\n            ",
        "inputSchema": {
          "properties": {
            "index": {
              "title": "Index",
              "type": "string"
            },
            "body": {
              "additionalProperties": true,
              "title": "Body",
              "type": "object"
            }
          },
          "required": [
            "index",
            "body"
          ],
          "type": "object"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "get_cluster_health",
        "description": "Returns basic information about the health of the cluster.",
        "inputSchema": {
          "properties": {},
          "type": "object"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "get_cluster_stats",
        "description": "Returns high-level overview of cluster statistics.",
        "inputSchema": {
          "properties": {},
          "type": "object"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "list_aliases",
        "description": "List all aliases.",
        "inputSchema": {
          "properties": {},
          "type": "object"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "get_alias",
        "description": "\n            Get alias information for a specific index.\n\n            Args:\n                index: Name of the index\n            ",
        "inputSchema": {
          "properties": {
            "index": {
              "title": "Index",
              "type": "string"
            }
          },
          "required": [
            "index"
          ],
          "type": "object"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "put_alias",
        "description": "\n            Create or update an alias for a specific index.\n\n            Args:\n                index: Name of the index\n                name: Name of the alias\n                body: Alias configuration\n            ",
        "inputSchema": {
          "properties": {
            "index": {
              "title": "Index",
              "type": "string"
            },
            "name": {
              "title": "Name",
              "type": "string"
            },
            "body": {
              "additionalProperties": true,
              "title": "Body",
              "type": "object"
            }
          },
          "required": [
            "index",
            "name",
            "body"
          ],
          "type": "object"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "delete_alias",
        "description": "\n            Delete an alias for a specific index.\n\n            Args:\n                index: Name of the index\n                name: Name of the alias\n            ",
        "inputSchema": {
          "properties": {
            "index": {
              "title": "Index",
              "type": "string"
            },
            "name": {
              "title": "Name",
              "type": "string"
            }
          },
          "required": [
            "index",
            "name"
          ],
          "type": "object"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "general_api_request",
        "description": "Perform a general HTTP API request.\n               Use this tool for any Elasticsearch/OpenSearch API that does not have a dedicated tool.\n            \n            Args:\n                method: HTTP method (GET, POST, PUT, DELETE, etc.)\n                path: API endpoint path\n                params: Query parameters\n                body: Request body\n            ",
        "inputSchema": {
          "properties": {
            "method": {
              "title": "Method",
              "type": "string"
            },
            "path": {
              "title": "Path",
              "type": "string"
            },
            "params": {
              "anyOf": [
                {
                  "additionalProperties": true,
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "title": "Params"
            },
            "body": {
              "anyOf": [
                {
                  "additionalProperties": true,
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "title": "Body"
            }
          },
          "required": [
            "method",
            "path"
          ],
          "type": "object"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      }
    ],
    "installations": {
      "default": {
        "type": "uvx",
        "command": "uvx",
        "version": "",
        "recommended": false,
        "deprecated": false
      }
    },
    "isOfficial": false,
    "deprecated": false
  },
  "monday-api-mcp": {
    "id": "monday-api-mcp",
    "name": "monday-api-mcp",
    "description": "Monday.com integration with dynamic API tools enabled",
    "license": "",
    "tools": [
      {
        "name": "delete_item",
        "description": "Delete an item",
        "inputSchema": {
          "type": "object",
          "properties": {
            "itemId": {
              "type": "number"
            }
          },
          "required": [
            "itemId"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": true,
          "idempotentHint": false,
          "openWorldHint": true
        },
        "_meta": {}
      },
      {
        "name": "get_board_items_by_name",
        "description": "Get items by board id and term",
        "inputSchema": {
          "type": "object",
          "properties": {
            "boardId": {
              "type": "number"
            },
            "term": {
              "type": "string"
            }
          },
          "required": [
            "boardId",
            "term"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": true,
          "destructiveHint": false,
          "idempotentHint": true,
          "openWorldHint": true
        },
        "_meta": {}
      },
      {
        "name": "create_item",
        "description": "Create a new item in a monday.com board",
        "inputSchema": {
          "type": "object",
          "properties": {
            "boardId": {
              "type": "number",
              "description": "The id of the board to which the new item will be added"
            },
            "name": {
              "type": "string",
              "description": "The name of the new item to be created, must be relevant to the user's request"
            },
            "groupId": {
              "type": "string",
              "description": "The id of the group id to which the new item will be added, if its not clearly specified, leave empty"
            },
            "columnValues": {
              "type": "string",
              "description": "A string containing the new column values for the item following this structure: {\\\"column_id\\\": \\\"value\\\",... you can change multiple columns at once, note that for status column you must use nested value with 'label' as a key and for date column use 'date' as key} - example: \"{\\\"text_column_id\\\":\\\"New text\\\", \\\"status_column_id\\\":{\\\"label\\\":\\\"Done\\\"}, \\\"date_column_id\\\":{\\\"date\\\":\\\"2023-05-25\\\"},\\\"dropdown_id\\\":\\\"value\\\", \\\"phone_id\\\":\\\"123-456-7890\\\", \\\"email_id\\\":\\\"test@example.com\\\"}\""
            }
          },
          "required": [
            "boardId",
            "name",
            "columnValues"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": true
        },
        "_meta": {}
      },
      {
        "name": "create_update",
        "description": "Create a new update in a monday.com board",
        "inputSchema": {
          "type": "object",
          "properties": {
            "itemId": {
              "type": "number",
              "description": "The id of the item to which the update will be added"
            },
            "body": {
              "type": "string",
              "description": "The update to be created, must be relevant to the user's request"
            }
          },
          "required": [
            "itemId",
            "body"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": true
        },
        "_meta": {}
      },
      {
        "name": "get_board_schema",
        "description": "Get board schema (columns and groups) by board id",
        "inputSchema": {
          "type": "object",
          "properties": {
            "boardId": {
              "type": "number",
              "description": "The id of the board to get the schema of"
            }
          },
          "required": [
            "boardId"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": true,
          "destructiveHint": false,
          "idempotentHint": true,
          "openWorldHint": true
        },
        "_meta": {}
      },
      {
        "name": "get_board_activity",
        "description": "Get board activity logs for a specified time range (defaults to last 30 days)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "boardId": {
              "type": "number",
              "description": "The id of the board to get activity for"
            },
            "fromDate": {
              "type": "string",
              "description": "Start date for activity range (ISO8601DateTime format). Defaults to 30 days ago"
            },
            "toDate": {
              "type": "string",
              "description": "End date for activity range (ISO8601DateTime format). Defaults to now"
            }
          },
          "required": [
            "boardId"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": true,
          "destructiveHint": false,
          "idempotentHint": true,
          "openWorldHint": true
        },
        "_meta": {}
      },
      {
        "name": "get_board_info",
        "description": "Get comprehensive board information including metadata, structure, owners, and configuration",
        "inputSchema": {
          "type": "object",
          "properties": {
            "boardId": {
              "type": "number",
              "description": "The id of the board to get information for"
            }
          },
          "required": [
            "boardId"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": true,
          "destructiveHint": false,
          "idempotentHint": true,
          "openWorldHint": true
        },
        "_meta": {}
      },
      {
        "name": "get_users_by_name",
        "description": "Get users, can be filtered by name or partial name",
        "inputSchema": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name or partial name of the user to get"
            }
          },
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": true,
          "destructiveHint": false,
          "idempotentHint": true,
          "openWorldHint": true
        },
        "_meta": {}
      },
      {
        "name": "change_item_column_values",
        "description": "Change the column values of an item in a monday.com board",
        "inputSchema": {
          "type": "object",
          "properties": {
            "boardId": {
              "type": "number",
              "description": "The ID of the board that contains the item to be updated"
            },
            "itemId": {
              "type": "number",
              "description": "The ID of the item to be updated"
            },
            "columnValues": {
              "type": "string",
              "description": "A string containing the new column values for the item following this structure: {\\\"column_id\\\": \\\"value\\\",... you can change multiple columns at once, note that for status column you must use nested value with 'label' as a key and for date column use 'date' as key} - example: \"{\\\"text_column_id\\\":\\\"New text\\\", \\\"status_column_id\\\":{\\\"label\\\":\\\"Done\\\"}, \\\"date_column_id\\\":{\\\"date\\\":\\\"2023-05-25\\\"}, \\\"phone_id\\\":\\\"123-456-7890\\\", \\\"email_id\\\":\\\"test@example.com\\\"}\""
            }
          },
          "required": [
            "boardId",
            "itemId",
            "columnValues"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": true,
          "openWorldHint": true
        },
        "_meta": {}
      },
      {
        "name": "move_item_to_group",
        "description": "Move an item to a group in a monday.com board",
        "inputSchema": {
          "type": "object",
          "properties": {
            "itemId": {
              "type": "number",
              "description": "The id of the item to which the update will be added"
            },
            "groupId": {
              "type": "string",
              "description": "The id of the group to which the item will be moved"
            }
          },
          "required": [
            "itemId",
            "groupId"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": true,
          "openWorldHint": true
        },
        "_meta": {}
      },
      {
        "name": "create_board",
        "description": "Create a monday.com board",
        "inputSchema": {
          "type": "object",
          "properties": {
            "boardName": {
              "type": "string",
              "description": "The name of the board to create"
            },
            "boardKind": {
              "type": "string",
              "enum": [
                "private",
                "public",
                "share"
              ],
              "default": "public",
              "description": "The kind of board to create"
            },
            "boardDescription": {
              "type": "string",
              "description": "The description of the board to create"
            },
            "workspaceId": {
              "type": "string",
              "description": "The ID of the workspace to create the board in"
            }
          },
          "required": [
            "boardName"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": true
        },
        "_meta": {}
      },
      {
        "name": "create_column",
        "description": "Create a new column in a monday.com board",
        "inputSchema": {
          "type": "object",
          "properties": {
            "boardId": {
              "type": "number",
              "description": "The id of the board to which the new column will be added"
            },
            "columnType": {
              "type": "string",
              "enum": [
                "auto_number",
                "board_relation",
                "button",
                "checkbox",
                "color_picker",
                "country",
                "creation_log",
                "date",
                "dependency",
                "direct_doc",
                "doc",
                "dropdown",
                "email",
                "file",
                "formula",
                "group",
                "hour",
                "integration",
                "item_assignees",
                "item_id",
                "last_updated",
                "link",
                "location",
                "long_text",
                "mirror",
                "name",
                "numbers",
                "people",
                "person",
                "phone",
                "progress",
                "rating",
                "status",
                "subtasks",
                "tags",
                "team",
                "text",
                "time_tracking",
                "timeline",
                "unsupported",
                "vote",
                "week",
                "world_clock"
              ],
              "description": "The type of the column to be created"
            },
            "columnTitle": {
              "type": "string",
              "description": "The title of the column to be created"
            },
            "columnDescription": {
              "type": "string",
              "description": "The description of the column to be created"
            },
            "columnSettings": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The default values for the new column (relevant only for column type 'status' or 'dropdown') when possible make the values relevant to the user's request"
            }
          },
          "required": [
            "boardId",
            "columnType",
            "columnTitle"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": true
        },
        "_meta": {}
      },
      {
        "name": "delete_column",
        "description": "Delete a column from a monday.com board",
        "inputSchema": {
          "type": "object",
          "properties": {
            "boardId": {
              "type": "number",
              "description": "The id of the board to which the new column will be added"
            },
            "columnId": {
              "type": "string",
              "description": "The id of the column to be deleted"
            }
          },
          "required": [
            "boardId",
            "columnId"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": true,
          "idempotentHint": false,
          "openWorldHint": true
        },
        "_meta": {}
      },
      {
        "name": "all_monday_api",
        "description": "Execute any Monday.com API operation by generating GraphQL queries and mutations dynamically. Make sure you ask only for the fields you need and nothing more. When providing the query/mutation - use get_graphql_schema and get_type_details tools first to understand the schema before crafting your query.",
        "inputSchema": {
          "type": "object",
          "properties": {
            "query": {
              "type": "string",
              "description": "Custom GraphQL query/mutation. you need to provide the full query / mutation"
            },
            "variables": {
              "type": "string",
              "description": "JSON string containing the variables for the GraphQL operation"
            }
          },
          "required": [
            "query",
            "variables"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": true,
          "idempotentHint": false,
          "openWorldHint": true
        },
        "_meta": {}
      },
      {
        "name": "get_graphql_schema",
        "description": "Fetch the Monday.com GraphQL schema structure including query and mutation definitions. This tool returns available query fields, mutation fields, and a list of GraphQL types in the schema. You can filter results by operation type (read/write) to focus on either queries or mutations.",
        "inputSchema": {
          "type": "object",
          "properties": {
            "random_string": {
              "type": "string",
              "description": "Dummy parameter for no-parameter tools"
            },
            "operationType": {
              "type": "string",
              "enum": [
                "read",
                "write"
              ],
              "description": "Type of operation: \"read\" for queries, \"write\" for mutations"
            }
          },
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": true,
          "destructiveHint": false,
          "idempotentHint": true,
          "openWorldHint": true
        },
        "_meta": {}
      },
      {
        "name": "get_type_details",
        "description": "Get detailed information about a specific GraphQL type from the Monday.com API schema",
        "inputSchema": {
          "type": "object",
          "properties": {
            "typeName": {
              "type": "string",
              "description": "The name of the GraphQL type to get details for"
            }
          },
          "required": [
            "typeName"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": true,
          "destructiveHint": false,
          "idempotentHint": true,
          "openWorldHint": true
        },
        "_meta": {}
      },
      {
        "name": "create_custom_activity",
        "description": "Create a new custom activity in the E&A app",
        "inputSchema": {
          "type": "object",
          "properties": {
            "color": {
              "type": "string",
              "enum": [
                "BRINK_PINK",
                "CELTIC_BLUE",
                "CORNFLOWER_BLUE",
                "DINGY_DUNGEON",
                "GO_GREEN",
                "GRAY",
                "LIGHT_DEEP_PINK",
                "LIGHT_HOT_PINK",
                "MAYA_BLUE",
                "MEDIUM_TURQUOISE",
                "PARADISE_PINK",
                "PHILIPPINE_GREEN",
                "PHILIPPINE_YELLOW",
                "SLATE_BLUE",
                "VIVID_CERULEAN",
                "YANKEES_BLUE",
                "YELLOW_GREEN",
                "YELLOW_ORANGE"
              ],
              "description": "The color of the custom activity"
            },
            "icon_id": {
              "type": "string",
              "enum": [
                "ASCENDING",
                "CAMERA",
                "CONFERENCE",
                "FLAG",
                "GIFT",
                "HEADPHONES",
                "HOMEKEYS",
                "LOCATION",
                "NOTEBOOK",
                "PAPERPLANE",
                "PLANE",
                "PLIERS",
                "TRIPOD",
                "TWOFLAGS",
                "UTENCILS"
              ],
              "description": "The icon ID of the custom activity"
            },
            "name": {
              "type": "string",
              "description": "The name of the custom activity"
            }
          },
          "required": [
            "color",
            "icon_id",
            "name"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": true
        },
        "_meta": {}
      },
      {
        "name": "create_timeline_item",
        "description": "Create a new timeline item in the E&A app",
        "inputSchema": {
          "type": "object",
          "properties": {
            "item_id": {
              "type": "number",
              "description": "The ID of the item to create the new timeline item on"
            },
            "custom_activity_id": {
              "type": "string",
              "description": "The ID of the custom activity for the timeline item"
            },
            "title": {
              "type": "string",
              "description": "The title of the new timeline item"
            },
            "summary": {
              "type": "string",
              "description": "The summary of the new timeline item (max 255 characters)"
            },
            "content": {
              "type": "string",
              "description": "The content of the new timeline item"
            },
            "timestamp": {
              "type": "string",
              "description": "The creation time of the new timeline item in ISO8601 format (e.g., 2024-06-06T18:00:30Z)"
            },
            "start_timestamp": {
              "type": "string",
              "description": "The start time of the timeline item in ISO8601 format"
            },
            "end_timestamp": {
              "type": "string",
              "description": "The end time of the timeline item in ISO8601 format"
            },
            "location": {
              "type": "string",
              "description": "The location to add to the new timeline item"
            },
            "phone": {
              "type": "string",
              "description": "The phone number to add to the new timeline item"
            },
            "url": {
              "type": "string",
              "description": "The URL to add to the new timeline item"
            }
          },
          "required": [
            "item_id",
            "custom_activity_id",
            "title",
            "timestamp"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": true
        },
        "_meta": {}
      },
      {
        "name": "fetch_custom_activity",
        "description": "Get custom activities from the E&A app",
        "inputSchema": {
          "type": "object",
          "properties": {},
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": true,
          "destructiveHint": false,
          "idempotentHint": true,
          "openWorldHint": true
        },
        "_meta": {}
      },
      {
        "name": "create_workflow_instructions",
        "description": "When the user asks to create a workflow or automation, you must use this tool, which provides instructions on how to create a workflow.\n    This tool is very important and should be used when the user explicitly requests:\n    - Workflow creation (e.g., \"create a monday workflow\", \"create a new workflow\").\n    - Automation (e.g., \"automate this process\", \"when item is created, set status to done\")\n    ",
        "inputSchema": {
          "type": "object",
          "properties": {},
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": true
        },
        "_meta": {}
      },
      {
        "name": "read_docs",
        "description": "Get a collection of monday.com documents with their content as markdown. \n\nPAGINATION: \n- Default limit is 25 documents per page\n- Use 'page' parameter to get additional pages (starts at 1)\n- Check response for 'has_more_pages' to know if you should continue paginating\n- If user asks for \"all documents\" and you get exactly 25 results, continue with page 2, 3, etc.\n\nFILTERING: Provide an ID filter object with:\n- type: 'ids' for specific document IDs\n- type: 'object_ids' for specific document object IDs  \n- type: 'workspace_ids' for all docs in specific workspaces\n- values: array of ID strings (at least 1 required)\n\nExamples:\n- { type: 'ids', values: ['123', '456'] }\n- { type: 'object_ids', values: ['123'] }\n- { type: 'workspace_ids', values: ['ws_101'] }\n\nUSAGE PATTERNS:\n- For specific documents: use type 'ids' or 'object_ids' (A monday doc has two unique identifiers)\n- For workspace exploration: use type 'workspace_ids' with pagination\n- For large searches: start with page 1, then paginate if has_more_pages=true",
        "inputSchema": {
          "type": "object",
          "properties": {
            "ids": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "ids",
                    "object_ids",
                    "workspace_ids"
                  ],
                  "description": "Type of id to query by: ids, object_ids, or workspace_ids"
                },
                "values": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "minItems": 1,
                  "description": "Array of ID values for this query type (at least 1 required)"
                }
              },
              "required": [
                "type",
                "values"
              ],
              "additionalProperties": false,
              "description": "ID query object that specifies a type (ids/object_ids/workspace_ids) and an array of values."
            },
            "limit": {
              "type": "number",
              "description": "Number of docs per page (default: 25). Affects pagination - if you get exactly this many results, there may be more pages."
            },
            "order_by": {
              "type": "string",
              "enum": [
                "created_at",
                "used_at"
              ],
              "description": "The order in which to retrieve your docs. The default shows created_at with the newest docs listed first. This argument will not be applied if you query docs by specific ids."
            },
            "page": {
              "type": "number",
              "description": "The page number to return (starts at 1). Use this to paginate through large result sets. Check response for has_more_pages indicator."
            }
          },
          "required": [
            "ids"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": true,
          "destructiveHint": false,
          "idempotentHint": true,
          "openWorldHint": true
        },
        "_meta": {}
      },
      {
        "name": "workspace_info",
        "description": "This tool returns the boards, docs and folders in a workspace and which folder they are in. It returns up to 100 of each object type, if you receive 100 assume there are additional objects of that type in the workspace.",
        "inputSchema": {
          "type": "object",
          "properties": {
            "workspace_id": {
              "type": "number",
              "description": "The ID of the workspace to get information for"
            }
          },
          "required": [
            "workspace_id"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": true,
          "destructiveHint": false,
          "idempotentHint": true,
          "openWorldHint": true
        },
        "_meta": {}
      },
      {
        "name": "list_workspace",
        "description": "List all workspaces available to the user. Returns up to 500 workspaces with their ID, name, and description.",
        "inputSchema": {
          "type": "object",
          "properties": {},
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": true,
          "destructiveHint": false,
          "idempotentHint": true,
          "openWorldHint": true
        },
        "_meta": {}
      },
      {
        "name": "create_doc",
        "description": "Create a new monday.com doc either inside a workspace or attached to an item (via a doc column). After creation, the provided markdown will be appended to the document.\n\nLOCATION TYPES:\n- workspace: Creates a document in a workspace (requires workspace_id, optional doc_kind, optional folder_id)\n- item: Creates a document attached to an item (requires item_id, optional column_id)\n\nUSAGE EXAMPLES:\n- Workspace doc: { location: { type: \"workspace\", workspace_id: 123, doc_kind: \"private\" }, markdown: \"...\" }\n- Workspace doc in folder: { location: { type: \"workspace\", workspace_id: 123, folder_id: 17264196 }, markdown: \"...\" }\n- Item doc: { location: { type: \"item\", item_id: 456, column_id: \"doc_col_1\" }, markdown: \"...\" }",
        "inputSchema": {
          "type": "object",
          "properties": {
            "location": {
              "anyOf": [
                {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "const": "workspace",
                      "description": "Create document in workspace"
                    },
                    "workspace_id": {
                      "type": "number",
                      "description": "Workspace ID under which to create the new document"
                    },
                    "doc_kind": {
                      "type": "string",
                      "enum": [
                        "private",
                        "public",
                        "share"
                      ],
                      "description": "Document kind (public/private/share). Defaults to public."
                    },
                    "folder_id": {
                      "type": "number",
                      "description": "Optional folder ID to place the document inside a specific folder"
                    }
                  },
                  "required": [
                    "type",
                    "workspace_id"
                  ],
                  "additionalProperties": false
                },
                {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "const": "item",
                      "description": "Create document attached to item"
                    },
                    "item_id": {
                      "type": "number",
                      "description": "Item ID to attach the new document to"
                    },
                    "column_id": {
                      "type": "string",
                      "description": "ID of an existing 'doc' column on the board which contains the item. If not provided, the tool will create a new doc column automatically when creating a doc on an item."
                    }
                  },
                  "required": [
                    "type",
                    "item_id"
                  ],
                  "additionalProperties": false
                }
              ],
              "description": "Location where the document should be created - either in a workspace or attached to an item"
            },
            "doc_name": {
              "type": "string",
              "description": "Name for the new document."
            },
            "markdown": {
              "type": "string",
              "description": "Markdown content that will be imported into the newly created document as blocks."
            }
          },
          "required": [
            "location",
            "doc_name",
            "markdown"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": true
        },
        "_meta": {}
      }
    ],
    "installations": {
      "default": {
        "type": "npx",
        "command": "npx",
        "version": "",
        "recommended": false,
        "deprecated": false
      }
    },
    "isOfficial": false,
    "deprecated": false
  },
  "slack-mcp": {
    "id": "slack-mcp",
    "name": "slack-mcp",
    "description": "Slack workspace integration for channel, message, reaction and user management",
    "license": "",
    "tools": [
      {
        "name": "slack_list_channels",
        "description": "List public and private channels that the bot is a member of, or pre-defined channels in the workspace with pagination",
        "inputSchema": {
          "type": "object",
          "properties": {
            "limit": {
              "type": "number",
              "default": 100,
              "description": "Maximum number of channels to return (default 100, max 200)"
            },
            "cursor": {
              "type": "string",
              "description": "Pagination cursor for next page of results"
            }
          },
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "slack_post_message",
        "description": "Post a new message to a Slack channel or direct message to user",
        "inputSchema": {
          "type": "object",
          "properties": {
            "channel_id": {
              "type": "string",
              "description": "The ID of the channel or user to post to"
            },
            "text": {
              "type": "string",
              "description": "The message text to post"
            }
          },
          "required": [
            "channel_id",
            "text"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "slack_reply_to_thread",
        "description": "Reply to a specific message thread in Slack",
        "inputSchema": {
          "type": "object",
          "properties": {
            "channel_id": {
              "type": "string",
              "description": "The ID of the channel containing the thread"
            },
            "thread_ts": {
              "type": "string",
              "description": "The timestamp of the parent message in the format '1234567890.123456'. Timestamps in the format without the period can be converted by adding the period such that 6 numbers come after it."
            },
            "text": {
              "type": "string",
              "description": "The reply text"
            }
          },
          "required": [
            "channel_id",
            "thread_ts",
            "text"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "slack_add_reaction",
        "description": "Add a reaction emoji to a message",
        "inputSchema": {
          "type": "object",
          "properties": {
            "channel_id": {
              "type": "string",
              "description": "The ID of the channel containing the message"
            },
            "timestamp": {
              "type": "string",
              "description": "The timestamp of the message to react to"
            },
            "reaction": {
              "type": "string",
              "description": "The name of the emoji reaction (without ::)"
            }
          },
          "required": [
            "channel_id",
            "timestamp",
            "reaction"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "slack_get_channel_history",
        "description": "Get recent messages from a channel",
        "inputSchema": {
          "type": "object",
          "properties": {
            "channel_id": {
              "type": "string",
              "description": "The ID of the channel"
            },
            "limit": {
              "type": "number",
              "default": 10,
              "description": "Number of messages to retrieve (default 10)"
            }
          },
          "required": [
            "channel_id"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "slack_get_thread_replies",
        "description": "Get all replies in a message thread",
        "inputSchema": {
          "type": "object",
          "properties": {
            "channel_id": {
              "type": "string",
              "description": "The ID of the channel containing the thread"
            },
            "thread_ts": {
              "type": "string",
              "description": "The timestamp of the parent message in the format '1234567890.123456'. Timestamps in the format without the period can be converted by adding the period such that 6 numbers come after it."
            }
          },
          "required": [
            "channel_id",
            "thread_ts"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "slack_get_users",
        "description": "Get a list of all users in the workspace with their basic profile information",
        "inputSchema": {
          "type": "object",
          "properties": {
            "cursor": {
              "type": "string",
              "description": "Pagination cursor for next page of results"
            },
            "limit": {
              "type": "number",
              "default": 100,
              "description": "Maximum number of users to return (default 100, max 200)"
            }
          },
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "slack_get_user_profile",
        "description": "Get detailed profile information for a specific user",
        "inputSchema": {
          "type": "object",
          "properties": {
            "user_id": {
              "type": "string",
              "description": "The ID of the user"
            }
          },
          "required": [
            "user_id"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      }
    ],
    "installations": {
      "default": {
        "type": "npx",
        "command": "npx",
        "version": "",
        "recommended": false,
        "deprecated": false
      }
    },
    "isOfficial": false,
    "deprecated": false
  },
  "jira": {
    "id": "jira",
    "name": "jira",
    "description": "Atlassian integration for Jira project management and Confluence documentation",
    "license": "",
    "tools": [
      {
        "name": "jira_get_user_profile",
        "description": "\n    Retrieve profile information for a specific Jira user.\n\n    Args:\n        ctx: The FastMCP context.\n        user_identifier: User identifier (email, username, key, or account ID).\n\n    Returns:\n        JSON string representing the Jira user profile object, or an error object if not found.\n\n    Raises:\n        ValueError: If the Jira client is not configured or available.\n    ",
        "inputSchema": {
          "properties": {
            "user_identifier": {
              "description": "Identifier for the user (e.g., email address 'user@example.com', username 'johndoe', account ID 'accountid:...', or key for Server/DC).",
              "title": "User Identifier",
              "type": "string"
            }
          },
          "required": [
            "user_identifier"
          ],
          "type": "object"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "jira_get_issue",
        "description": "Get details of a specific Jira issue including its Epic links and relationship information.\n\n    Args:\n        ctx: The FastMCP context.\n        issue_key: Jira issue key.\n        fields: Comma-separated list of fields to return (e.g., 'summary,status,customfield_10010'), a single field as a string (e.g., 'duedate'), '*all' for all fields, or omitted for essentials.\n        expand: Optional fields to expand.\n        comment_limit: Maximum number of comments.\n        properties: Issue properties to return.\n        update_history: Whether to update issue view history.\n\n    Returns:\n        JSON string representing the Jira issue object.\n\n    Raises:\n        ValueError: If the Jira client is not configured or available.\n    ",
        "inputSchema": {
          "properties": {
            "issue_key": {
              "description": "Jira issue key (e.g., 'PROJ-123')",
              "title": "Issue Key",
              "type": "string"
            },
            "fields": {
              "default": "created,status,description,reporter,labels,summary,updated,assignee,issuetype,priority",
              "description": "(Optional) Comma-separated list of fields to return (e.g., 'summary,status,customfield_10010'). You may also provide a single field as a string (e.g., 'duedate'). Use '*all' for all fields (including custom fields), or omit for essential fields only.",
              "title": "Fields",
              "type": "string"
            },
            "expand": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "(Optional) Fields to expand. Examples: 'renderedFields' (for rendered content), 'transitions' (for available status transitions), 'changelog' (for history)",
              "title": "Expand"
            },
            "comment_limit": {
              "default": 10,
              "description": "Maximum number of comments to include (0 or null for no comments)",
              "maximum": 100,
              "minimum": 0,
              "title": "Comment Limit",
              "type": "integer"
            },
            "properties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "(Optional) A comma-separated list of issue properties to return",
              "default": null,
              "title": "Properties"
            },
            "update_history": {
              "default": true,
              "description": "Whether to update the issue view history for the requesting user",
              "title": "Update History",
              "type": "boolean"
            }
          },
          "required": [
            "issue_key"
          ],
          "type": "object"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "jira_search",
        "description": "Search Jira issues using JQL (Jira Query Language).\n\n    Args:\n        ctx: The FastMCP context.\n        jql: JQL query string.\n        fields: Comma-separated fields to return.\n        limit: Maximum number of results.\n        start_at: Starting index for pagination.\n        projects_filter: Comma-separated list of project keys to filter by.\n        expand: Optional fields to expand.\n\n    Returns:\n        JSON string representing the search results including pagination info.\n    ",
        "inputSchema": {
          "properties": {
            "jql": {
              "description": "JQL query string (Jira Query Language). Examples:\n- Find Epics: \"issuetype = Epic AND project = PROJ\"\n- Find issues in Epic: \"parent = PROJ-123\"\n- Find by status: \"status = 'In Progress' AND project = PROJ\"\n- Find by assignee: \"assignee = currentUser()\"\n- Find recently updated: \"updated >= -7d AND project = PROJ\"\n- Find by label: \"labels = frontend AND project = PROJ\"\n- Find by priority: \"priority = High AND project = PROJ\"",
              "title": "Jql",
              "type": "string"
            },
            "fields": {
              "default": "created,status,description,reporter,labels,summary,updated,assignee,issuetype,priority",
              "description": "(Optional) Comma-separated fields to return in the results. Use '*all' for all fields, or specify individual fields like 'summary,status,assignee,priority'",
              "title": "Fields",
              "type": "string"
            },
            "limit": {
              "default": 10,
              "description": "Maximum number of results (1-50)",
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "start_at": {
              "default": 0,
              "description": "Starting index for pagination (0-based)",
              "minimum": 0,
              "title": "Start At",
              "type": "integer"
            },
            "projects_filter": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "(Optional) Comma-separated list of project keys to filter results by. Overrides the environment variable JIRA_PROJECTS_FILTER if provided.",
              "title": "Projects Filter"
            },
            "expand": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "(Optional) fields to expand. Examples: 'renderedFields', 'transitions', 'changelog'",
              "title": "Expand"
            }
          },
          "required": [
            "jql"
          ],
          "type": "object"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "jira_search_fields",
        "description": "Search Jira fields by keyword with fuzzy match.\n\n    Args:\n        ctx: The FastMCP context.\n        keyword: Keyword for fuzzy search.\n        limit: Maximum number of results.\n        refresh: Whether to force refresh the field list.\n\n    Returns:\n        JSON string representing a list of matching field definitions.\n    ",
        "inputSchema": {
          "properties": {
            "keyword": {
              "default": "",
              "description": "Keyword for fuzzy search. If left empty, lists the first 'limit' available fields in their default order.",
              "title": "Keyword",
              "type": "string"
            },
            "limit": {
              "default": 10,
              "description": "Maximum number of results",
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "refresh": {
              "default": false,
              "description": "Whether to force refresh the field list",
              "title": "Refresh",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "jira_get_project_issues",
        "description": "Get all issues for a specific Jira project.\n\n    Args:\n        ctx: The FastMCP context.\n        project_key: The project key.\n        limit: Maximum number of results.\n        start_at: Starting index for pagination.\n\n    Returns:\n        JSON string representing the search results including pagination info.\n    ",
        "inputSchema": {
          "properties": {
            "project_key": {
              "description": "The project key",
              "title": "Project Key",
              "type": "string"
            },
            "limit": {
              "default": 10,
              "description": "Maximum number of results (1-50)",
              "maximum": 50,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "start_at": {
              "default": 0,
              "description": "Starting index for pagination (0-based)",
              "minimum": 0,
              "title": "Start At",
              "type": "integer"
            }
          },
          "required": [
            "project_key"
          ],
          "type": "object"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "jira_get_transitions",
        "description": "Get available status transitions for a Jira issue.\n\n    Args:\n        ctx: The FastMCP context.\n        issue_key: Jira issue key.\n\n    Returns:\n        JSON string representing a list of available transitions.\n    ",
        "inputSchema": {
          "properties": {
            "issue_key": {
              "description": "Jira issue key (e.g., 'PROJ-123')",
              "title": "Issue Key",
              "type": "string"
            }
          },
          "required": [
            "issue_key"
          ],
          "type": "object"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "jira_get_worklog",
        "description": "Get worklog entries for a Jira issue.\n\n    Args:\n        ctx: The FastMCP context.\n        issue_key: Jira issue key.\n\n    Returns:\n        JSON string representing the worklog entries.\n    ",
        "inputSchema": {
          "properties": {
            "issue_key": {
              "description": "Jira issue key (e.g., 'PROJ-123')",
              "title": "Issue Key",
              "type": "string"
            }
          },
          "required": [
            "issue_key"
          ],
          "type": "object"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "jira_download_attachments",
        "description": "Download attachments from a Jira issue.\n\n    Args:\n        ctx: The FastMCP context.\n        issue_key: Jira issue key.\n        target_dir: Directory to save attachments.\n\n    Returns:\n        JSON string indicating the result of the download operation.\n    ",
        "inputSchema": {
          "properties": {
            "issue_key": {
              "description": "Jira issue key (e.g., 'PROJ-123')",
              "title": "Issue Key",
              "type": "string"
            },
            "target_dir": {
              "description": "Directory where attachments should be saved",
              "title": "Target Dir",
              "type": "string"
            }
          },
          "required": [
            "issue_key",
            "target_dir"
          ],
          "type": "object"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "jira_get_agile_boards",
        "description": "Get jira agile boards by name, project key, or type.\n\n    Args:\n        ctx: The FastMCP context.\n        board_name: Name of the board (fuzzy search).\n        project_key: Project key.\n        board_type: Board type ('scrum' or 'kanban').\n        start_at: Starting index.\n        limit: Maximum results.\n\n    Returns:\n        JSON string representing a list of board objects.\n    ",
        "inputSchema": {
          "properties": {
            "board_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "(Optional) The name of board, support fuzzy search",
              "title": "Board Name"
            },
            "project_key": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "(Optional) Jira project key (e.g., 'PROJ-123')",
              "title": "Project Key"
            },
            "board_type": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "(Optional) The type of jira board (e.g., 'scrum', 'kanban')",
              "title": "Board Type"
            },
            "start_at": {
              "default": 0,
              "description": "Starting index for pagination (0-based)",
              "minimum": 0,
              "title": "Start At",
              "type": "integer"
            },
            "limit": {
              "default": 10,
              "description": "Maximum number of results (1-50)",
              "maximum": 50,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "jira_get_board_issues",
        "description": "Get all issues linked to a specific board filtered by JQL.\n\n    Args:\n        ctx: The FastMCP context.\n        board_id: The ID of the board.\n        jql: JQL query string to filter issues.\n        fields: Comma-separated fields to return.\n        start_at: Starting index for pagination.\n        limit: Maximum number of results.\n        expand: Optional fields to expand.\n\n    Returns:\n        JSON string representing the search results including pagination info.\n    ",
        "inputSchema": {
          "properties": {
            "board_id": {
              "description": "The id of the board (e.g., '1001')",
              "title": "Board Id",
              "type": "string"
            },
            "jql": {
              "description": "JQL query string (Jira Query Language). Examples:\n- Find Epics: \"issuetype = Epic AND project = PROJ\"\n- Find issues in Epic: \"parent = PROJ-123\"\n- Find by status: \"status = 'In Progress' AND project = PROJ\"\n- Find by assignee: \"assignee = currentUser()\"\n- Find recently updated: \"updated >= -7d AND project = PROJ\"\n- Find by label: \"labels = frontend AND project = PROJ\"\n- Find by priority: \"priority = High AND project = PROJ\"",
              "title": "Jql",
              "type": "string"
            },
            "fields": {
              "default": "created,status,description,reporter,labels,summary,updated,assignee,issuetype,priority",
              "description": "Comma-separated fields to return in the results. Use '*all' for all fields, or specify individual fields like 'summary,status,assignee,priority'",
              "title": "Fields",
              "type": "string"
            },
            "start_at": {
              "default": 0,
              "description": "Starting index for pagination (0-based)",
              "minimum": 0,
              "title": "Start At",
              "type": "integer"
            },
            "limit": {
              "default": 10,
              "description": "Maximum number of results (1-50)",
              "maximum": 50,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "expand": {
              "default": "version",
              "description": "Optional fields to expand in the response (e.g., 'changelog').",
              "title": "Expand",
              "type": "string"
            }
          },
          "required": [
            "board_id",
            "jql"
          ],
          "type": "object"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "jira_get_sprints_from_board",
        "description": "Get jira sprints from board by state.\n\n    Args:\n        ctx: The FastMCP context.\n        board_id: The ID of the board.\n        state: Sprint state ('active', 'future', 'closed'). If None, returns all sprints.\n        start_at: Starting index.\n        limit: Maximum results.\n\n    Returns:\n        JSON string representing a list of sprint objects.\n    ",
        "inputSchema": {
          "properties": {
            "board_id": {
              "description": "The id of board (e.g., '1000')",
              "title": "Board Id",
              "type": "string"
            },
            "state": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "Sprint state (e.g., 'active', 'future', 'closed')",
              "title": "State"
            },
            "start_at": {
              "default": 0,
              "description": "Starting index for pagination (0-based)",
              "minimum": 0,
              "title": "Start At",
              "type": "integer"
            },
            "limit": {
              "default": 10,
              "description": "Maximum number of results (1-50)",
              "maximum": 50,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            }
          },
          "required": [
            "board_id"
          ],
          "type": "object"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "jira_get_sprint_issues",
        "description": "Get jira issues from sprint.\n\n    Args:\n        ctx: The FastMCP context.\n        sprint_id: The ID of the sprint.\n        fields: Comma-separated fields to return.\n        start_at: Starting index.\n        limit: Maximum results.\n\n    Returns:\n        JSON string representing the search results including pagination info.\n    ",
        "inputSchema": {
          "properties": {
            "sprint_id": {
              "description": "The id of sprint (e.g., '10001')",
              "title": "Sprint Id",
              "type": "string"
            },
            "fields": {
              "default": "created,status,description,reporter,labels,summary,updated,assignee,issuetype,priority",
              "description": "Comma-separated fields to return in the results. Use '*all' for all fields, or specify individual fields like 'summary,status,assignee,priority'",
              "title": "Fields",
              "type": "string"
            },
            "start_at": {
              "default": 0,
              "description": "Starting index for pagination (0-based)",
              "minimum": 0,
              "title": "Start At",
              "type": "integer"
            },
            "limit": {
              "default": 10,
              "description": "Maximum number of results (1-50)",
              "maximum": 50,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            }
          },
          "required": [
            "sprint_id"
          ],
          "type": "object"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "jira_get_link_types",
        "description": "Get all available issue link types.\n\n    Args:\n        ctx: The FastMCP context.\n\n    Returns:\n        JSON string representing a list of issue link type objects.\n    ",
        "inputSchema": {
          "properties": {},
          "type": "object"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "jira_create_issue",
        "description": "Create a new Jira issue with optional Epic link or parent for subtasks.\n\n    Args:\n        ctx: The FastMCP context.\n        project_key: The JIRA project key.\n        summary: Summary/title of the issue.\n        issue_type: Issue type (e.g., 'Task', 'Bug', 'Story', 'Epic', 'Subtask').\n        assignee: Assignee's user identifier (string): Email, display name, or account ID (e.g., 'user@example.com', 'John Doe', 'accountid:...').\n        description: Issue description.\n        components: Comma-separated list of component names.\n        additional_fields: Dictionary of additional fields.\n\n    Returns:\n        JSON string representing the created issue object.\n\n    Raises:\n        ValueError: If in read-only mode or Jira client is unavailable.\n    ",
        "inputSchema": {
          "properties": {
            "project_key": {
              "description": "The JIRA project key (e.g. 'PROJ', 'DEV', 'SUPPORT'). This is the prefix of issue keys in your project. Never assume what it might be, always ask the user.",
              "title": "Project Key",
              "type": "string"
            },
            "summary": {
              "description": "Summary/title of the issue",
              "title": "Summary",
              "type": "string"
            },
            "issue_type": {
              "description": "Issue type (e.g. 'Task', 'Bug', 'Story', 'Epic', 'Subtask'). The available types depend on your project configuration. For subtasks, use 'Subtask' (not 'Sub-task') and include parent in additional_fields.",
              "title": "Issue Type",
              "type": "string"
            },
            "assignee": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "(Optional) Assignee's user identifier (string): Email, display name, or account ID (e.g., 'user@example.com', 'John Doe', 'accountid:...')",
              "title": "Assignee"
            },
            "description": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "Issue description",
              "title": "Description"
            },
            "components": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "(Optional) Comma-separated list of component names to assign (e.g., 'Frontend,API')",
              "title": "Components"
            },
            "additional_fields": {
              "anyOf": [
                {
                  "additionalProperties": true,
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "(Optional) Dictionary of additional fields to set. Examples:\n- Set priority: {'priority': {'name': 'High'}}\n- Add labels: {'labels': ['frontend', 'urgent']}\n- Link to parent (for any issue type): {'parent': 'PROJ-123'}\n- Set Fix Version/s: {'fixVersions': [{'id': '10020'}]}\n- Custom fields: {'customfield_10010': 'value'}",
              "title": "Additional Fields"
            }
          },
          "required": [
            "project_key",
            "summary",
            "issue_type"
          ],
          "type": "object"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "jira_batch_create_issues",
        "description": "Create multiple Jira issues in a batch.\n\n    Args:\n        ctx: The FastMCP context.\n        issues: JSON array string of issue objects.\n        validate_only: If true, only validates without creating.\n\n    Returns:\n        JSON string indicating success and listing created issues (or validation result).\n\n    Raises:\n        ValueError: If in read-only mode, Jira client unavailable, or invalid JSON.\n    ",
        "inputSchema": {
          "properties": {
            "issues": {
              "description": "JSON array of issue objects. Each object should contain:\n- project_key (required): The project key (e.g., 'PROJ')\n- summary (required): Issue summary/title\n- issue_type (required): Type of issue (e.g., 'Task', 'Bug')\n- description (optional): Issue description\n- assignee (optional): Assignee username or email\n- components (optional): Array of component names\nExample: [\n  {\"project_key\": \"PROJ\", \"summary\": \"Issue 1\", \"issue_type\": \"Task\"},\n  {\"project_key\": \"PROJ\", \"summary\": \"Issue 2\", \"issue_type\": \"Bug\", \"components\": [\"Frontend\"]}\n]",
              "title": "Issues",
              "type": "string"
            },
            "validate_only": {
              "default": false,
              "description": "If true, only validates the issues without creating them",
              "title": "Validate Only",
              "type": "boolean"
            }
          },
          "required": [
            "issues"
          ],
          "type": "object"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "jira_batch_get_changelogs",
        "description": "Get changelogs for multiple Jira issues (Cloud only).\n\n    Args:\n        ctx: The FastMCP context.\n        issue_ids_or_keys: List of issue IDs or keys.\n        fields: List of fields to filter changelogs by. None for all fields.\n        limit: Maximum changelogs per issue (-1 for all).\n\n    Returns:\n        JSON string representing a list of issues with their changelogs.\n\n    Raises:\n        NotImplementedError: If run on Jira Server/Data Center.\n        ValueError: If Jira client is unavailable.\n    ",
        "inputSchema": {
          "properties": {
            "issue_ids_or_keys": {
              "description": "List of Jira issue IDs or keys, e.g. ['PROJ-123', 'PROJ-124']",
              "items": {
                "type": "string"
              },
              "title": "Issue Ids Or Keys",
              "type": "array"
            },
            "fields": {
              "anyOf": [
                {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "(Optional) Filter the changelogs by fields, e.g. ['status', 'assignee']. Default to None for all fields.",
              "title": "Fields"
            },
            "limit": {
              "default": -1,
              "description": "Maximum number of changelogs to return in result for each issue. Default to -1 for all changelogs. Notice that it only limits the results in the response, the function will still fetch all the data.",
              "title": "Limit",
              "type": "integer"
            }
          },
          "required": [
            "issue_ids_or_keys"
          ],
          "type": "object"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "jira_update_issue",
        "description": "Update an existing Jira issue including changing status, adding Epic links, updating fields, etc.\n\n    Args:\n        ctx: The FastMCP context.\n        issue_key: Jira issue key.\n        fields: Dictionary of fields to update.\n        additional_fields: Optional dictionary of additional fields.\n        attachments: Optional JSON array string or comma-separated list of file paths.\n\n    Returns:\n        JSON string representing the updated issue object and attachment results.\n\n    Raises:\n        ValueError: If in read-only mode or Jira client unavailable, or invalid input.\n    ",
        "inputSchema": {
          "properties": {
            "issue_key": {
              "description": "Jira issue key (e.g., 'PROJ-123')",
              "title": "Issue Key",
              "type": "string"
            },
            "fields": {
              "additionalProperties": true,
              "description": "Dictionary of fields to update. For 'assignee', provide a string identifier (email, name, or accountId). Example: `{'assignee': 'user@example.com', 'summary': 'New Summary'}`",
              "title": "Fields",
              "type": "object"
            },
            "additional_fields": {
              "anyOf": [
                {
                  "additionalProperties": true,
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "(Optional) Dictionary of additional fields to update. Use this for custom fields or more complex updates.",
              "title": "Additional Fields"
            },
            "attachments": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "(Optional) JSON string array or comma-separated list of file paths to attach to the issue. Example: '/path/to/file1.txt,/path/to/file2.txt' or ['/path/to/file1.txt','/path/to/file2.txt']",
              "title": "Attachments"
            }
          },
          "required": [
            "issue_key",
            "fields"
          ],
          "type": "object"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "jira_delete_issue",
        "description": "Delete an existing Jira issue.\n\n    Args:\n        ctx: The FastMCP context.\n        issue_key: Jira issue key.\n\n    Returns:\n        JSON string indicating success.\n\n    Raises:\n        ValueError: If in read-only mode or Jira client unavailable.\n    ",
        "inputSchema": {
          "properties": {
            "issue_key": {
              "description": "Jira issue key (e.g. PROJ-123)",
              "title": "Issue Key",
              "type": "string"
            }
          },
          "required": [
            "issue_key"
          ],
          "type": "object"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "jira_add_comment",
        "description": "Add a comment to a Jira issue.\n\n    Args:\n        ctx: The FastMCP context.\n        issue_key: Jira issue key.\n        comment: Comment text in Markdown.\n\n    Returns:\n        JSON string representing the added comment object.\n\n    Raises:\n        ValueError: If in read-only mode or Jira client unavailable.\n    ",
        "inputSchema": {
          "properties": {
            "issue_key": {
              "description": "Jira issue key (e.g., 'PROJ-123')",
              "title": "Issue Key",
              "type": "string"
            },
            "comment": {
              "description": "Comment text in Markdown format",
              "title": "Comment",
              "type": "string"
            }
          },
          "required": [
            "issue_key",
            "comment"
          ],
          "type": "object"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "jira_add_worklog",
        "description": "Add a worklog entry to a Jira issue.\n\n    Args:\n        ctx: The FastMCP context.\n        issue_key: Jira issue key.\n        time_spent: Time spent in Jira format.\n        comment: Optional comment in Markdown.\n        started: Optional start time in ISO format.\n        original_estimate: Optional new original estimate.\n        remaining_estimate: Optional new remaining estimate.\n\n\n    Returns:\n        JSON string representing the added worklog object.\n\n    Raises:\n        ValueError: If in read-only mode or Jira client unavailable.\n    ",
        "inputSchema": {
          "properties": {
            "issue_key": {
              "description": "Jira issue key (e.g., 'PROJ-123')",
              "title": "Issue Key",
              "type": "string"
            },
            "time_spent": {
              "description": "Time spent in Jira format. Examples: '1h 30m' (1 hour and 30 minutes), '1d' (1 day), '30m' (30 minutes), '4h' (4 hours)",
              "title": "Time Spent",
              "type": "string"
            },
            "comment": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "(Optional) Comment for the worklog in Markdown format",
              "title": "Comment"
            },
            "started": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "(Optional) Start time in ISO format. If not provided, the current time will be used. Example: '2023-08-01T12:00:00.000+0000'",
              "title": "Started"
            },
            "original_estimate": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "(Optional) New value for the original estimate",
              "title": "Original Estimate"
            },
            "remaining_estimate": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "(Optional) New value for the remaining estimate",
              "title": "Remaining Estimate"
            }
          },
          "required": [
            "issue_key",
            "time_spent"
          ],
          "type": "object"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "jira_link_to_epic",
        "description": "Link an existing issue to an epic.\n\n    Args:\n        ctx: The FastMCP context.\n        issue_key: The key of the issue to link.\n        epic_key: The key of the epic to link to.\n\n    Returns:\n        JSON string representing the updated issue object.\n\n    Raises:\n        ValueError: If in read-only mode or Jira client unavailable.\n    ",
        "inputSchema": {
          "properties": {
            "issue_key": {
              "description": "The key of the issue to link (e.g., 'PROJ-123')",
              "title": "Issue Key",
              "type": "string"
            },
            "epic_key": {
              "description": "The key of the epic to link to (e.g., 'PROJ-456')",
              "title": "Epic Key",
              "type": "string"
            }
          },
          "required": [
            "issue_key",
            "epic_key"
          ],
          "type": "object"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "jira_create_issue_link",
        "description": "Create a link between two Jira issues.\n\n    Args:\n        ctx: The FastMCP context.\n        link_type: The type of link (e.g., 'Blocks').\n        inward_issue_key: The key of the source issue.\n        outward_issue_key: The key of the target issue.\n        comment: Optional comment text.\n        comment_visibility: Optional dictionary for comment visibility.\n\n    Returns:\n        JSON string indicating success or failure.\n\n    Raises:\n        ValueError: If required fields are missing, invalid input, in read-only mode, or Jira client unavailable.\n    ",
        "inputSchema": {
          "properties": {
            "link_type": {
              "description": "The type of link to create (e.g., 'Duplicate', 'Blocks', 'Relates to')",
              "title": "Link Type",
              "type": "string"
            },
            "inward_issue_key": {
              "description": "The key of the inward issue (e.g., 'PROJ-123')",
              "title": "Inward Issue Key",
              "type": "string"
            },
            "outward_issue_key": {
              "description": "The key of the outward issue (e.g., 'PROJ-456')",
              "title": "Outward Issue Key",
              "type": "string"
            },
            "comment": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "(Optional) Comment to add to the link",
              "title": "Comment"
            },
            "comment_visibility": {
              "anyOf": [
                {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "(Optional) Visibility settings for the comment (e.g., {'type': 'group', 'value': 'jira-users'})",
              "title": "Comment Visibility"
            }
          },
          "required": [
            "link_type",
            "inward_issue_key",
            "outward_issue_key"
          ],
          "type": "object"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "jira_create_remote_issue_link",
        "description": "Create a remote issue link (web link or Confluence link) for a Jira issue.\n\n    This tool allows you to add web links and Confluence links to Jira issues.\n    The links will appear in the issue's \"Links\" section and can be clicked to navigate to external resources.\n\n    Args:\n        ctx: The FastMCP context.\n        issue_key: The key of the issue to add the link to.\n        url: The URL to link to (can be any web page or Confluence page).\n        title: The title/name that will be displayed for the link.\n        summary: Optional description of what the link is for.\n        relationship: Optional relationship description.\n        icon_url: Optional URL to a 16x16 icon for the link.\n\n    Returns:\n        JSON string indicating success or failure.\n\n    Raises:\n        ValueError: If required fields are missing, invalid input, in read-only mode, or Jira client unavailable.\n    ",
        "inputSchema": {
          "properties": {
            "issue_key": {
              "description": "The key of the issue to add the link to (e.g., 'PROJ-123')",
              "title": "Issue Key",
              "type": "string"
            },
            "url": {
              "description": "The URL to link to (e.g., 'https://example.com/page' or Confluence page URL)",
              "title": "Url",
              "type": "string"
            },
            "title": {
              "description": "The title/name of the link (e.g., 'Documentation Page', 'Confluence Page')",
              "title": "Title",
              "type": "string"
            },
            "summary": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "(Optional) Description of the link",
              "title": "Summary"
            },
            "relationship": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "(Optional) Relationship description (e.g., 'causes', 'relates to', 'documentation')",
              "title": "Relationship"
            },
            "icon_url": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "(Optional) URL to a 16x16 icon for the link",
              "title": "Icon Url"
            }
          },
          "required": [
            "issue_key",
            "url",
            "title"
          ],
          "type": "object"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "jira_remove_issue_link",
        "description": "Remove a link between two Jira issues.\n\n    Args:\n        ctx: The FastMCP context.\n        link_id: The ID of the link to remove.\n\n    Returns:\n        JSON string indicating success.\n\n    Raises:\n        ValueError: If link_id is missing, in read-only mode, or Jira client unavailable.\n    ",
        "inputSchema": {
          "properties": {
            "link_id": {
              "description": "The ID of the link to remove",
              "title": "Link Id",
              "type": "string"
            }
          },
          "required": [
            "link_id"
          ],
          "type": "object"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "jira_transition_issue",
        "description": "Transition a Jira issue to a new status.\n\n    Args:\n        ctx: The FastMCP context.\n        issue_key: Jira issue key.\n        transition_id: ID of the transition.\n        fields: Optional dictionary of fields to update during transition.\n        comment: Optional comment for the transition.\n\n    Returns:\n        JSON string representing the updated issue object.\n\n    Raises:\n        ValueError: If required fields missing, invalid input, in read-only mode, or Jira client unavailable.\n    ",
        "inputSchema": {
          "properties": {
            "issue_key": {
              "description": "Jira issue key (e.g., 'PROJ-123')",
              "title": "Issue Key",
              "type": "string"
            },
            "transition_id": {
              "description": "ID of the transition to perform. Use the jira_get_transitions tool first to get the available transition IDs for the issue. Example values: '11', '21', '31'",
              "title": "Transition Id",
              "type": "string"
            },
            "fields": {
              "anyOf": [
                {
                  "additionalProperties": true,
                  "type": "object"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "(Optional) Dictionary of fields to update during the transition. Some transitions require specific fields to be set (e.g., resolution). Example: {'resolution': {'name': 'Fixed'}}",
              "title": "Fields"
            },
            "comment": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "(Optional) Comment to add during the transition. This will be visible in the issue history.",
              "title": "Comment"
            }
          },
          "required": [
            "issue_key",
            "transition_id"
          ],
          "type": "object"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "jira_create_sprint",
        "description": "Create Jira sprint for a board.\n\n    Args:\n        ctx: The FastMCP context.\n        board_id: Board ID.\n        sprint_name: Sprint name.\n        start_date: Start date (ISO format).\n        end_date: End date (ISO format).\n        goal: Optional sprint goal.\n\n    Returns:\n        JSON string representing the created sprint object.\n\n    Raises:\n        ValueError: If in read-only mode or Jira client unavailable.\n    ",
        "inputSchema": {
          "properties": {
            "board_id": {
              "description": "The id of board (e.g., '1000')",
              "title": "Board Id",
              "type": "string"
            },
            "sprint_name": {
              "description": "Name of the sprint (e.g., 'Sprint 1')",
              "title": "Sprint Name",
              "type": "string"
            },
            "start_date": {
              "description": "Start time for sprint (ISO 8601 format)",
              "title": "Start Date",
              "type": "string"
            },
            "end_date": {
              "description": "End time for sprint (ISO 8601 format)",
              "title": "End Date",
              "type": "string"
            },
            "goal": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "(Optional) Goal of the sprint",
              "title": "Goal"
            }
          },
          "required": [
            "board_id",
            "sprint_name",
            "start_date",
            "end_date"
          ],
          "type": "object"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "jira_update_sprint",
        "description": "Update jira sprint.\n\n    Args:\n        ctx: The FastMCP context.\n        sprint_id: The ID of the sprint.\n        sprint_name: Optional new name.\n        state: Optional new state (future|active|closed).\n        start_date: Optional new start date.\n        end_date: Optional new end date.\n        goal: Optional new goal.\n\n    Returns:\n        JSON string representing the updated sprint object or an error message.\n\n    Raises:\n        ValueError: If in read-only mode or Jira client unavailable.\n    ",
        "inputSchema": {
          "properties": {
            "sprint_id": {
              "description": "The id of sprint (e.g., '10001')",
              "title": "Sprint Id",
              "type": "string"
            },
            "sprint_name": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "(Optional) New name for the sprint",
              "title": "Sprint Name"
            },
            "state": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "(Optional) New state for the sprint (future|active|closed)",
              "title": "State"
            },
            "start_date": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "(Optional) New start date for the sprint",
              "title": "Start Date"
            },
            "end_date": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "(Optional) New end date for the sprint",
              "title": "End Date"
            },
            "goal": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "(Optional) New goal for the sprint",
              "title": "Goal"
            }
          },
          "required": [
            "sprint_id"
          ],
          "type": "object"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "jira_get_project_versions",
        "description": "Get all fix versions for a specific Jira project.",
        "inputSchema": {
          "properties": {
            "project_key": {
              "description": "Jira project key (e.g., 'PROJ')",
              "title": "Project Key",
              "type": "string"
            }
          },
          "required": [
            "project_key"
          ],
          "type": "object"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "jira_get_all_projects",
        "description": "Get all Jira projects accessible to the current user.\n\n    Args:\n        ctx: The FastMCP context.\n        include_archived: Whether to include archived projects.\n\n    Returns:\n        JSON string representing a list of project objects accessible to the user.\n        Project keys are always returned in uppercase.\n        If JIRA_PROJECTS_FILTER is configured, only returns projects matching those keys.\n\n    Raises:\n        ValueError: If the Jira client is not configured or available.\n    ",
        "inputSchema": {
          "properties": {
            "include_archived": {
              "default": false,
              "description": "Whether to include archived projects in the results",
              "title": "Include Archived",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "jira_create_version",
        "description": "Create a new fix version in a Jira project.\n\n    Args:\n        ctx: The FastMCP context.\n        project_key: The project key.\n        name: Name of the version.\n        start_date: Start date (optional).\n        release_date: Release date (optional).\n        description: Description (optional).\n\n    Returns:\n        JSON string of the created version object.\n    ",
        "inputSchema": {
          "properties": {
            "project_key": {
              "description": "Jira project key (e.g., 'PROJ')",
              "title": "Project Key",
              "type": "string"
            },
            "name": {
              "description": "Name of the version",
              "title": "Name",
              "type": "string"
            },
            "start_date": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "Start date (YYYY-MM-DD)",
              "title": "Start Date"
            },
            "release_date": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "Release date (YYYY-MM-DD)",
              "title": "Release Date"
            },
            "description": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "Description of the version",
              "title": "Description"
            }
          },
          "required": [
            "project_key",
            "name"
          ],
          "type": "object"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "jira_batch_create_versions",
        "description": "Batch create multiple versions in a Jira project.\n\n    Args:\n        ctx: The FastMCP context.\n        project_key: The project key.\n        versions: JSON array string of version objects.\n\n    Returns:\n        JSON array of results, each with success flag, version or error.\n    ",
        "inputSchema": {
          "properties": {
            "project_key": {
              "description": "Jira project key (e.g., 'PROJ')",
              "title": "Project Key",
              "type": "string"
            },
            "versions": {
              "description": "JSON array of version objects. Each object should contain:\n- name (required): Name of the version\n- startDate (optional): Start date (YYYY-MM-DD)\n- releaseDate (optional): Release date (YYYY-MM-DD)\n- description (optional): Description of the version\nExample: [\n  {\"name\": \"v1.0\", \"startDate\": \"2025-01-01\", \"releaseDate\": \"2025-02-01\", \"description\": \"First release\"},\n  {\"name\": \"v2.0\"}\n]",
              "title": "Versions",
              "type": "string"
            }
          },
          "required": [
            "project_key",
            "versions"
          ],
          "type": "object"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "confluence_search",
        "description": "Search Confluence content using simple terms or CQL.\n\n    Args:\n        ctx: The FastMCP context.\n        query: Search query - can be simple text or a CQL query string.\n        limit: Maximum number of results (1-50).\n        spaces_filter: Comma-separated list of space keys to filter by.\n\n    Returns:\n        JSON string representing a list of simplified Confluence page objects.\n    ",
        "inputSchema": {
          "properties": {
            "query": {
              "description": "Search query - can be either a simple text (e.g. 'project documentation') or a CQL query string. Simple queries use 'siteSearch' by default, to mimic the WebUI search, with an automatic fallback to 'text' search if not supported. Examples of CQL:\n- Basic search: 'type=page AND space=DEV'\n- Personal space search: 'space=\"~username\"' (note: personal space keys starting with ~ must be quoted)\n- Search by title: 'title~\"Meeting Notes\"'\n- Use siteSearch: 'siteSearch ~ \"important concept\"'\n- Use text search: 'text ~ \"important concept\"'\n- Recent content: 'created >= \"2023-01-01\"'\n- Content with specific label: 'label=documentation'\n- Recently modified content: 'lastModified > startOfMonth(\"-1M\")'\n- Content modified this year: 'creator = currentUser() AND lastModified > startOfYear()'\n- Content you contributed to recently: 'contributor = currentUser() AND lastModified > startOfWeek()'\n- Content watched by user: 'watcher = \"user@domain.com\" AND type = page'\n- Exact phrase in content: 'text ~ \"\\\"Urgent Review Required\\\"\" AND label = \"pending-approval\"'\n- Title wildcards: 'title ~ \"Minutes*\" AND (space = \"HR\" OR space = \"Marketing\")'\nNote: Special identifiers need proper quoting in CQL: personal space keys (e.g., \"~username\"), reserved words, numeric IDs, and identifiers with special characters.",
              "title": "Query",
              "type": "string"
            },
            "limit": {
              "default": 10,
              "description": "Maximum number of results (1-50)",
              "maximum": 50,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "spaces_filter": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "(Optional) Comma-separated list of space keys to filter results by. Overrides the environment variable CONFLUENCE_SPACES_FILTER if provided. Use empty string to disable filtering.",
              "title": "Spaces Filter"
            }
          },
          "required": [
            "query"
          ],
          "type": "object"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "confluence_get_page",
        "description": "Get content of a specific Confluence page by its ID, or by its title and space key.\n\n    Args:\n        ctx: The FastMCP context.\n        page_id: Confluence page ID. If provided, 'title' and 'space_key' are ignored.\n        title: The exact title of the page. Must be used with 'space_key'.\n        space_key: The key of the space. Must be used with 'title'.\n        include_metadata: Whether to include page metadata.\n        convert_to_markdown: Convert content to markdown (true) or keep raw HTML (false).\n\n    Returns:\n        JSON string representing the page content and/or metadata, or an error if not found or parameters are invalid.\n    ",
        "inputSchema": {
          "properties": {
            "page_id": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "Confluence page ID (numeric ID, can be found in the page URL). For example, in the URL 'https://example.atlassian.net/wiki/spaces/TEAM/pages/123456789/Page+Title', the page ID is '123456789'. Provide this OR both 'title' and 'space_key'. If page_id is provided, title and space_key will be ignored.",
              "title": "Page Id"
            },
            "title": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "The exact title of the Confluence page. Use this with 'space_key' if 'page_id' is not known.",
              "title": "Title"
            },
            "space_key": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "The key of the Confluence space where the page resides (e.g., 'DEV', 'TEAM'). Required if using 'title'.",
              "title": "Space Key"
            },
            "include_metadata": {
              "default": true,
              "description": "Whether to include page metadata such as creation date, last update, version, and labels.",
              "title": "Include Metadata",
              "type": "boolean"
            },
            "convert_to_markdown": {
              "default": true,
              "description": "Whether to convert page to markdown (true) or keep it in raw HTML format (false). Raw HTML can reveal macros (like dates) not visible in markdown, but CAUTION: using HTML significantly increases token usage in AI responses.",
              "title": "Convert To Markdown",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "confluence_get_page_children",
        "description": "Get child pages of a specific Confluence page.\n\n    Args:\n        ctx: The FastMCP context.\n        parent_id: The ID of the parent page.\n        expand: Fields to expand.\n        limit: Maximum number of child pages.\n        include_content: Whether to include page content.\n        convert_to_markdown: Convert content to markdown if include_content is true.\n        start: Starting index for pagination.\n\n    Returns:\n        JSON string representing a list of child page objects.\n    ",
        "inputSchema": {
          "properties": {
            "parent_id": {
              "description": "The ID of the parent page whose children you want to retrieve",
              "title": "Parent Id",
              "type": "string"
            },
            "expand": {
              "default": "version",
              "description": "Fields to expand in the response (e.g., 'version', 'body.storage')",
              "title": "Expand",
              "type": "string"
            },
            "limit": {
              "default": 25,
              "description": "Maximum number of child pages to return (1-50)",
              "maximum": 50,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "include_content": {
              "default": false,
              "description": "Whether to include the page content in the response",
              "title": "Include Content",
              "type": "boolean"
            },
            "convert_to_markdown": {
              "default": true,
              "description": "Whether to convert page content to markdown (true) or keep it in raw HTML format (false). Only relevant if include_content is true.",
              "title": "Convert To Markdown",
              "type": "boolean"
            },
            "start": {
              "default": 0,
              "description": "Starting index for pagination (0-based)",
              "minimum": 0,
              "title": "Start",
              "type": "integer"
            }
          },
          "required": [
            "parent_id"
          ],
          "type": "object"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "confluence_get_comments",
        "description": "Get comments for a specific Confluence page.\n\n    Args:\n        ctx: The FastMCP context.\n        page_id: Confluence page ID.\n\n    Returns:\n        JSON string representing a list of comment objects.\n    ",
        "inputSchema": {
          "properties": {
            "page_id": {
              "description": "Confluence page ID (numeric ID, can be parsed from URL, e.g. from 'https://example.atlassian.net/wiki/spaces/TEAM/pages/123456789/Page+Title' -> '123456789')",
              "title": "Page Id",
              "type": "string"
            }
          },
          "required": [
            "page_id"
          ],
          "type": "object"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "confluence_get_labels",
        "description": "Get labels for a specific Confluence page.\n\n    Args:\n        ctx: The FastMCP context.\n        page_id: Confluence page ID.\n\n    Returns:\n        JSON string representing a list of label objects.\n    ",
        "inputSchema": {
          "properties": {
            "page_id": {
              "description": "Confluence page ID (numeric ID, can be parsed from URL, e.g. from 'https://example.atlassian.net/wiki/spaces/TEAM/pages/123456789/Page+Title' -> '123456789')",
              "title": "Page Id",
              "type": "string"
            }
          },
          "required": [
            "page_id"
          ],
          "type": "object"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "confluence_add_label",
        "description": "Add label to an existing Confluence page.\n\n    Args:\n        ctx: The FastMCP context.\n        page_id: The ID of the page to update.\n        name: The name of the label.\n\n    Returns:\n        JSON string representing the updated list of label objects for the page.\n\n    Raises:\n        ValueError: If in read-only mode or Confluence client is unavailable.\n    ",
        "inputSchema": {
          "properties": {
            "page_id": {
              "description": "The ID of the page to update",
              "title": "Page Id",
              "type": "string"
            },
            "name": {
              "description": "The name of the label",
              "title": "Name",
              "type": "string"
            }
          },
          "required": [
            "page_id",
            "name"
          ],
          "type": "object"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "confluence_create_page",
        "description": "Create a new Confluence page.\n\n    Args:\n        ctx: The FastMCP context.\n        space_key: The key of the space.\n        title: The title of the page.\n        content: The content of the page (format depends on content_format).\n        parent_id: Optional parent page ID.\n        content_format: The format of the content ('markdown', 'wiki', or 'storage').\n        enable_heading_anchors: Whether to enable heading anchors (markdown only).\n\n    Returns:\n        JSON string representing the created page object.\n\n    Raises:\n        ValueError: If in read-only mode, Confluence client is unavailable, or invalid content_format.\n    ",
        "inputSchema": {
          "properties": {
            "space_key": {
              "description": "The key of the space to create the page in (usually a short uppercase code like 'DEV', 'TEAM', or 'DOC')",
              "title": "Space Key",
              "type": "string"
            },
            "title": {
              "description": "The title of the page",
              "title": "Title",
              "type": "string"
            },
            "content": {
              "description": "The content of the page. Format depends on content_format parameter. Can be Markdown (default), wiki markup, or storage format",
              "title": "Content",
              "type": "string"
            },
            "parent_id": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "(Optional) parent page ID. If provided, this page will be created as a child of the specified page",
              "title": "Parent Id"
            },
            "content_format": {
              "default": "markdown",
              "description": "(Optional) The format of the content parameter. Options: 'markdown' (default), 'wiki', or 'storage'. Wiki format uses Confluence wiki markup syntax",
              "title": "Content Format",
              "type": "string"
            },
            "enable_heading_anchors": {
              "default": false,
              "description": "(Optional) Whether to enable automatic heading anchor generation. Only applies when content_format is 'markdown'",
              "title": "Enable Heading Anchors",
              "type": "boolean"
            }
          },
          "required": [
            "space_key",
            "title",
            "content"
          ],
          "type": "object"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "confluence_update_page",
        "description": "Update an existing Confluence page.\n\n    Args:\n        ctx: The FastMCP context.\n        page_id: The ID of the page to update.\n        title: The new title of the page.\n        content: The new content of the page (format depends on content_format).\n        is_minor_edit: Whether this is a minor edit.\n        version_comment: Optional comment for this version.\n        parent_id: Optional new parent page ID.\n        content_format: The format of the content ('markdown', 'wiki', or 'storage').\n        enable_heading_anchors: Whether to enable heading anchors (markdown only).\n\n    Returns:\n        JSON string representing the updated page object.\n\n    Raises:\n        ValueError: If Confluence client is not configured, available, or invalid content_format.\n    ",
        "inputSchema": {
          "properties": {
            "page_id": {
              "description": "The ID of the page to update",
              "title": "Page Id",
              "type": "string"
            },
            "title": {
              "description": "The new title of the page",
              "title": "Title",
              "type": "string"
            },
            "content": {
              "description": "The new content of the page. Format depends on content_format parameter",
              "title": "Content",
              "type": "string"
            },
            "is_minor_edit": {
              "default": false,
              "description": "Whether this is a minor edit",
              "title": "Is Minor Edit",
              "type": "boolean"
            },
            "version_comment": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "Optional comment for this version",
              "title": "Version Comment"
            },
            "parent_id": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": null,
              "description": "Optional the new parent page ID",
              "title": "Parent Id"
            },
            "content_format": {
              "default": "markdown",
              "description": "(Optional) The format of the content parameter. Options: 'markdown' (default), 'wiki', or 'storage'. Wiki format uses Confluence wiki markup syntax",
              "title": "Content Format",
              "type": "string"
            },
            "enable_heading_anchors": {
              "default": false,
              "description": "(Optional) Whether to enable automatic heading anchor generation. Only applies when content_format is 'markdown'",
              "title": "Enable Heading Anchors",
              "type": "boolean"
            }
          },
          "required": [
            "page_id",
            "title",
            "content"
          ],
          "type": "object"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "confluence_delete_page",
        "description": "Delete an existing Confluence page.\n\n    Args:\n        ctx: The FastMCP context.\n        page_id: The ID of the page to delete.\n\n    Returns:\n        JSON string indicating success or failure.\n\n    Raises:\n        ValueError: If Confluence client is not configured or available.\n    ",
        "inputSchema": {
          "properties": {
            "page_id": {
              "description": "The ID of the page to delete",
              "title": "Page Id",
              "type": "string"
            }
          },
          "required": [
            "page_id"
          ],
          "type": "object"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "confluence_add_comment",
        "description": "Add a comment to a Confluence page.\n\n    Args:\n        ctx: The FastMCP context.\n        page_id: The ID of the page to add a comment to.\n        content: The comment content in Markdown format.\n\n    Returns:\n        JSON string representing the created comment.\n\n    Raises:\n        ValueError: If in read-only mode or Confluence client is unavailable.\n    ",
        "inputSchema": {
          "properties": {
            "page_id": {
              "description": "The ID of the page to add a comment to",
              "title": "Page Id",
              "type": "string"
            },
            "content": {
              "description": "The comment content in Markdown format",
              "title": "Content",
              "type": "string"
            }
          },
          "required": [
            "page_id",
            "content"
          ],
          "type": "object"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "confluence_search_user",
        "description": "Search Confluence users using CQL.\n\n    Args:\n        ctx: The FastMCP context.\n        query: Search query - a CQL query string for user search.\n        limit: Maximum number of results (1-50).\n\n    Returns:\n        JSON string representing a list of simplified Confluence user search result objects.\n    ",
        "inputSchema": {
          "properties": {
            "query": {
              "description": "Search query - a CQL query string for user search. Examples of CQL:\n- Basic user lookup by full name: 'user.fullname ~ \"First Last\"'\nNote: Special identifiers need proper quoting in CQL: personal space keys (e.g., \"~username\"), reserved words, numeric IDs, and identifiers with special characters.",
              "title": "Query",
              "type": "string"
            },
            "limit": {
              "default": 10,
              "description": "Maximum number of results (1-50)",
              "maximum": 50,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            }
          },
          "required": [
            "query"
          ],
          "type": "object"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      }
    ],
    "installations": {
      "default": {
        "type": "uvx",
        "command": "uvx",
        "version": "",
        "recommended": false,
        "deprecated": false
      }
    },
    "isOfficial": false,
    "deprecated": false
  },
  "airtable": {
    "id": "airtable",
    "name": "airtable",
    "description": "Airtable database and spreadsheet operations",
    "license": "",
    "tools": [
      {
        "name": "list_bases",
        "description": "List all accessible Airtable bases",
        "inputSchema": {
          "type": "object",
          "properties": {},
          "required": []
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "list_tables",
        "description": "List all tables in a base",
        "inputSchema": {
          "type": "object",
          "properties": {
            "base_id": {
              "type": "string",
              "description": "ID of the base"
            }
          },
          "required": [
            "base_id"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "create_table",
        "description": "Create a new table in a base",
        "inputSchema": {
          "type": "object",
          "properties": {
            "base_id": {
              "type": "string",
              "description": "ID of the base"
            },
            "table_name": {
              "type": "string",
              "description": "Name of the new table"
            },
            "description": {
              "type": "string",
              "description": "Description of the table"
            },
            "fields": {
              "type": "array",
              "description": "Initial fields for the table",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the field"
                  },
                  "type": {
                    "type": "string",
                    "description": "Type of the field (e.g., singleLineText, multilineText, number, etc.)"
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of the field"
                  },
                  "options": {
                    "type": "object",
                    "description": "Field-specific options"
                  }
                },
                "required": [
                  "name",
                  "type"
                ]
              }
            }
          },
          "required": [
            "base_id",
            "table_name"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "update_table",
        "description": "Update a table's schema",
        "inputSchema": {
          "type": "object",
          "properties": {
            "base_id": {
              "type": "string",
              "description": "ID of the base"
            },
            "table_id": {
              "type": "string",
              "description": "ID of the table to update"
            },
            "name": {
              "type": "string",
              "description": "New name for the table"
            },
            "description": {
              "type": "string",
              "description": "New description for the table"
            }
          },
          "required": [
            "base_id",
            "table_id"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "create_field",
        "description": "Create a new field in a table",
        "inputSchema": {
          "type": "object",
          "properties": {
            "base_id": {
              "type": "string",
              "description": "ID of the base"
            },
            "table_id": {
              "type": "string",
              "description": "ID of the table"
            },
            "field": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the field"
                },
                "type": {
                  "type": "string",
                  "description": "Type of the field"
                },
                "description": {
                  "type": "string",
                  "description": "Description of the field"
                },
                "options": {
                  "type": "object",
                  "description": "Field-specific options"
                }
              },
              "required": [
                "name",
                "type"
              ]
            }
          },
          "required": [
            "base_id",
            "table_id",
            "field"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "update_field",
        "description": "Update a field in a table",
        "inputSchema": {
          "type": "object",
          "properties": {
            "base_id": {
              "type": "string",
              "description": "ID of the base"
            },
            "table_id": {
              "type": "string",
              "description": "ID of the table"
            },
            "field_id": {
              "type": "string",
              "description": "ID of the field to update"
            },
            "updates": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "New name for the field"
                },
                "description": {
                  "type": "string",
                  "description": "New description for the field"
                },
                "options": {
                  "type": "object",
                  "description": "New field-specific options"
                }
              }
            }
          },
          "required": [
            "base_id",
            "table_id",
            "field_id",
            "updates"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "list_records",
        "description": "List records in a table",
        "inputSchema": {
          "type": "object",
          "properties": {
            "base_id": {
              "type": "string",
              "description": "ID of the base"
            },
            "table_name": {
              "type": "string",
              "description": "Name of the table"
            },
            "max_records": {
              "type": "number",
              "description": "Maximum number of records to return"
            }
          },
          "required": [
            "base_id",
            "table_name"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "create_record",
        "description": "Create a new record in a table",
        "inputSchema": {
          "type": "object",
          "properties": {
            "base_id": {
              "type": "string",
              "description": "ID of the base"
            },
            "table_name": {
              "type": "string",
              "description": "Name of the table"
            },
            "fields": {
              "type": "object",
              "description": "Record fields as key-value pairs"
            }
          },
          "required": [
            "base_id",
            "table_name",
            "fields"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "update_record",
        "description": "Update an existing record in a table",
        "inputSchema": {
          "type": "object",
          "properties": {
            "base_id": {
              "type": "string",
              "description": "ID of the base"
            },
            "table_name": {
              "type": "string",
              "description": "Name of the table"
            },
            "record_id": {
              "type": "string",
              "description": "ID of the record to update"
            },
            "fields": {
              "type": "object",
              "description": "Record fields to update as key-value pairs"
            }
          },
          "required": [
            "base_id",
            "table_name",
            "record_id",
            "fields"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "delete_record",
        "description": "Delete a record from a table",
        "inputSchema": {
          "type": "object",
          "properties": {
            "base_id": {
              "type": "string",
              "description": "ID of the base"
            },
            "table_name": {
              "type": "string",
              "description": "Name of the table"
            },
            "record_id": {
              "type": "string",
              "description": "ID of the record to delete"
            }
          },
          "required": [
            "base_id",
            "table_name",
            "record_id"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "search_records",
        "description": "Search for records in a table",
        "inputSchema": {
          "type": "object",
          "properties": {
            "base_id": {
              "type": "string",
              "description": "ID of the base"
            },
            "table_name": {
              "type": "string",
              "description": "Name of the table"
            },
            "field_name": {
              "type": "string",
              "description": "Name of the field to search in"
            },
            "value": {
              "type": "string",
              "description": "Value to search for"
            }
          },
          "required": [
            "base_id",
            "table_name",
            "field_name",
            "value"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "get_record",
        "description": "Get a single record by its ID",
        "inputSchema": {
          "type": "object",
          "properties": {
            "base_id": {
              "type": "string",
              "description": "ID of the base"
            },
            "table_name": {
              "type": "string",
              "description": "Name of the table"
            },
            "record_id": {
              "type": "string",
              "description": "ID of the record to retrieve"
            }
          },
          "required": [
            "base_id",
            "table_name",
            "record_id"
          ]
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      }
    ],
    "installations": {
      "default": {
        "type": "npx",
        "command": "npx",
        "version": "",
        "recommended": false,
        "deprecated": false
      }
    },
    "isOfficial": false,
    "deprecated": false
  },
  "gitlab": {
    "id": "gitlab",
    "name": "gitlab",
    "description": "GitLab API integration for project management and repository operations",
    "license": "",
    "tools": [
      {
        "name": "create_or_update_file",
        "description": "Create or update a single file in a GitLab project",
        "inputSchema": {
          "type": "object",
          "properties": {
            "project_id": {
              "type": "string",
              "description": "Project ID or URL-encoded path"
            },
            "file_path": {
              "type": "string",
              "description": "Path where to create/update the file"
            },
            "content": {
              "type": "string",
              "description": "Content of the file"
            },
            "commit_message": {
              "type": "string",
              "description": "Commit message"
            },
            "branch": {
              "type": "string",
              "description": "Branch to create/update the file in"
            },
            "previous_path": {
              "type": "string",
              "description": "Path of the file to move/rename"
            }
          },
          "required": [
            "project_id",
            "file_path",
            "content",
            "commit_message",
            "branch"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "search_repositories",
        "description": "Search for GitLab projects",
        "inputSchema": {
          "type": "object",
          "properties": {
            "search": {
              "type": "string",
              "description": "Search query"
            },
            "page": {
              "type": "number",
              "description": "Page number for pagination (default: 1)"
            },
            "per_page": {
              "type": "number",
              "description": "Number of results per page (default: 20)"
            }
          },
          "required": [
            "search"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "create_repository",
        "description": "Create a new GitLab project",
        "inputSchema": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Repository name"
            },
            "description": {
              "type": "string",
              "description": "Repository description"
            },
            "visibility": {
              "type": "string",
              "enum": [
                "private",
                "internal",
                "public"
              ],
              "description": "Repository visibility level"
            },
            "initialize_with_readme": {
              "type": "boolean",
              "description": "Initialize with README.md"
            }
          },
          "required": [
            "name"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "get_file_contents",
        "description": "Get the contents of a file or directory from a GitLab project",
        "inputSchema": {
          "type": "object",
          "properties": {
            "project_id": {
              "type": "string",
              "description": "Project ID or URL-encoded path"
            },
            "file_path": {
              "type": "string",
              "description": "Path to the file or directory"
            },
            "ref": {
              "type": "string",
              "description": "Branch/tag/commit to get contents from"
            }
          },
          "required": [
            "project_id",
            "file_path"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "push_files",
        "description": "Push multiple files to a GitLab project in a single commit",
        "inputSchema": {
          "type": "object",
          "properties": {
            "project_id": {
              "type": "string",
              "description": "Project ID or URL-encoded path"
            },
            "branch": {
              "type": "string",
              "description": "Branch to push to"
            },
            "files": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "file_path": {
                    "type": "string",
                    "description": "Path where to create the file"
                  },
                  "content": {
                    "type": "string",
                    "description": "Content of the file"
                  }
                },
                "required": [
                  "file_path",
                  "content"
                ],
                "additionalProperties": false
              },
              "description": "Array of files to push"
            },
            "commit_message": {
              "type": "string",
              "description": "Commit message"
            }
          },
          "required": [
            "project_id",
            "branch",
            "files",
            "commit_message"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "create_issue",
        "description": "Create a new issue in a GitLab project",
        "inputSchema": {
          "type": "object",
          "properties": {
            "project_id": {
              "type": "string",
              "description": "Project ID or URL-encoded path"
            },
            "title": {
              "type": "string",
              "description": "Issue title"
            },
            "description": {
              "type": "string",
              "description": "Issue description"
            },
            "assignee_ids": {
              "type": "array",
              "items": {
                "type": "number"
              },
              "description": "Array of user IDs to assign"
            },
            "labels": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Array of label names"
            },
            "milestone_id": {
              "type": "number",
              "description": "Milestone ID to assign"
            }
          },
          "required": [
            "project_id",
            "title"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "create_merge_request",
        "description": "Create a new merge request in a GitLab project",
        "inputSchema": {
          "type": "object",
          "properties": {
            "project_id": {
              "type": "string",
              "description": "Project ID or URL-encoded path"
            },
            "title": {
              "type": "string",
              "description": "Merge request title"
            },
            "description": {
              "type": "string",
              "description": "Merge request description"
            },
            "source_branch": {
              "type": "string",
              "description": "Branch containing changes"
            },
            "target_branch": {
              "type": "string",
              "description": "Branch to merge into"
            },
            "draft": {
              "type": "boolean",
              "description": "Create as draft merge request"
            },
            "allow_collaboration": {
              "type": "boolean",
              "description": "Allow commits from upstream members"
            }
          },
          "required": [
            "project_id",
            "title",
            "source_branch",
            "target_branch"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "fork_repository",
        "description": "Fork a GitLab project to your account or specified namespace",
        "inputSchema": {
          "type": "object",
          "properties": {
            "project_id": {
              "type": "string",
              "description": "Project ID or URL-encoded path"
            },
            "namespace": {
              "type": "string",
              "description": "Namespace to fork to (full path)"
            }
          },
          "required": [
            "project_id"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      },
      {
        "name": "create_branch",
        "description": "Create a new branch in a GitLab project",
        "inputSchema": {
          "type": "object",
          "properties": {
            "project_id": {
              "type": "string",
              "description": "Project ID or URL-encoded path"
            },
            "branch": {
              "type": "string",
              "description": "Name for the new branch"
            },
            "ref": {
              "type": "string",
              "description": "Source branch/commit for new branch"
            }
          },
          "required": [
            "project_id",
            "branch"
          ],
          "additionalProperties": false,
          "$schema": "http://json-schema.org/draft-07/schema#"
        },
        "outputSchema": {},
        "annotations": {
          "readOnlyHint": false,
          "destructiveHint": false,
          "idempotentHint": false,
          "openWorldHint": false
        },
        "_meta": {}
      }
    ],
    "installations": {
      "default": {
        "type": "npx",
        "command": "npx",
        "version": "",
        "recommended": false,
        "deprecated": false
      }
    },
    "isOfficial": false,
    "deprecated": false
  }
}
